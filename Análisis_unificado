paquetes <- c(
  "openxlsx", "fBasics", "psych", "modeest", "ggrepel", "GGally", 
  "mice", "corrplot", "readxl", "doebioresearch", "performance", "dplyr", 
  "ScottKnott", "agricolae", "car", "broom", "data.table", "emmeans", 
  "ggplot2", "tidyverse", "lattice", "nlme", "lme4", "lmerTest", "multcomp", 
  "rstatix", "ggpubr", "see", "MASS", "lsmeans", "scales", "lmtest", "multcompView", 
  "googlesheets4", "googledrive", "clipr", "FactoMineR", "factoextra", 
  "glmmTMB", "DHARMa", "MuMIn", "hnp", "effects", "sjstats", "ExpDes", "sf", "tmap", "terra",
  "RVAideMemoire", "RColorBrewer", "DiagrammeR", "missMDA")

# Verifica cuáles no están instalados
no_instalados <- paquetes[!(paquetes %in% installed.packages()[,"Package"])];no_instalados

# Instala los que faltan
if(length(no_instalados)) {
  install.packages(no_instalados)
} else {
  message("Todos los paquetes ya están instalados.")
}

# Carga todos los paquetes (opcional)
lapply(paquetes, library, character.only = TRUE)
#-----------------------------------------------------------------------------------------------
archivo <- file.choose() #Abrir el archivo Excel  
hojas <- excel_sheets(archivo); hojas
for (h in hojas) {
  cat("\n--- Hoja:", h, "---\n")
  datos_hoja <- read_excel(archivo, sheet = h, n_max = 10)  # solo primeras 5 filas
  print(datos_hoja)
}
datos <- read_excel(archivo, sheet = 1)


#------------------------------------------------------------------------------------------------
########################################--ANÁLISIS ESTADÍSTICO--##########################################
# Análisis exploratorio de datos

attach(datos)
str(datos)
head(datos)
tail(datos)
view(datos)
summary(datos)
colnames(datos)
sapply(datos, class) #Tipo de datos
variables_numericas <- datos[sapply(datos, is.numeric)]
round(basicStats(variables_numericas), 2) #Estadística descriptiva

######--EXPERIMENTOS SIMPLES--########################

#DCA:

#################Modelo: ANDEVA para cada variable---------------------------------------------------------------------------
ANDEVA<- aov(Nitrogeno ~ Tratamiento)
summary(ANDEVA)
tabla_ANDEVA<-tidy(ANDEVA)
print(ANDEVA)


###############--ANDEVA para todas las variables de respuesta----------------------------------------------------

tratamiento <- "Tratamiento"
as.factor(tratamiento)
respuestas <- c("TCH", "Brix", "Pol", "Pureza", "Jugo", "Fibra", "Humedad","Rendimiento")


for (var in respuestas) {
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  formula <- as.formula(paste0("`", var, "` ~ `", tratamiento, "`"))
  modelo <- aov(formula, data = datos)
  
  print(summary(modelo))
}

################################# Verificación de supuestos para todas las variables de respuesta---------------------------------

for (var in respuestas) {
  
  formula <- as.formula(paste0("`", var, "` ~ `", tratamiento, "`"))
  modelo <- aov(formula, data = datos)
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  cat("\n--- Verificación de supuestos ---\n")
  
  # 1. QQ-plot en pantalla
  qqPlot(modelo$residuals, main=paste("QQ-plot:", var), col="red", lwd=2, pch=16)
  
  # 2. Residuos vs Ajustados en pantalla
  plot(modelo$fitted.values, modelo$residuals, 
       main=paste("Residuos vs Ajustados:", var),
       xlab="Valores Ajustados", ylab="Residuos", pch=16, col="blue")
  abline(h=0, col="red", lwd=2)
  
  # Shapiro-Wilk
  if(length(unique(modelo$residuals)) > 1){
    SW <- shapiro.test(modelo$residuals)
    cat("\nShapiro-Wilk para", var, ":\n")
    print(SW)
  } else {
    cat("\nShapiro-Wilk no se puede calcular: todos los residuos son idénticos.\n")
  }
  
  # Bartlett y Levene
  if(length(unique(datos[[var]])) > 1){
    cat("\nPrueba de Bartlett para", var, ":\n")
    print(bartlett.test(formula, data=datos))
    
    cat("\nPrueba de Levene para", var, ":\n")
    print(leveneTest(formula, data=datos, center="median"))
  } else {
    cat("Bartlett y Levene no se pueden calcular: variable constante.\n")
  }
  
  cat("\n------------------------------------\n")
}

#########################----Prueba múltiple de medias para todas las variables de respuesta


for (var in respuestas) {
  
  # Crear un nombre seguro: prefijo "var_" + reemplazar caracteres especiales
  nombre_var <- paste0("var_", gsub("[^[:alnum:]_]", "_", var))
  
  # Ignorar nombres que queden vacíos o solo guiones
  if(grepl("^var_[_]*$", nombre_var)){
    cat("\nVariable", var, "omitida: nombre no válido para análisis.\n")
    next
  }
  
  # Crear dataframe temporal con nombre seguro
  datos_temp <- datos
  names(datos_temp)[names(datos_temp) == var] <- nombre_var
  
  # Crear modelo ANDEVA
  formula <- as.formula(paste0("`", nombre_var, "` ~ `", tratamiento, "`"))
  modelo <- aov(formula, data = datos_temp)
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  # -------------------------
  # Tukey HSD
  # -------------------------
  if(length(unique(datos_temp[[nombre_var]])) > 1){
    cat("\n--- Tukey HSD ---\n")
    HSD.test(modelo, tratamiento, console=TRUE)
  } else {
    cat("\nTukey HSD no se puede calcular: variable constante.\n")
  }
  
  # -------------------------
  # Scott-Knott
  # -------------------------
  if(length(unique(datos_temp[[nombre_var]])) > 1){
    cat("\n--- Scott-Knott ---\n")
    sk <- SK(modelo, which=tratamiento, dispersion="se", sig.level=0.05)
    print(summary(sk))
  } else {
    cat("\nScott-Knott no se puede calcular: variable constante o sin variación.\n")
  }
  
  cat("\n------------------------------------\n")
}


###############################################--Análisis gráfico--######################################

for (var in respuestas) {
  
  # Resumen con medias e IC95%
  resumen <- datos %>%
    group_by(.data[[tratamiento]]) %>%
    summarise(
      media = mean(.data[[var]], na.rm=TRUE),
      sd = sd(.data[[var]], na.rm=TRUE),
      n = n(),
      se = sd / sqrt(n),
      IC_inf = media - qt(0.975, df=n-1) * se,
      IC_sup = media + qt(0.975, df=n-1) * se,
      .groups="drop"
    )
  
  # Ordenar tratamientos por la media
  resumen <- resumen %>%
    arrange(media) %>%
    mutate(Trat_ordenado = factor(.data[[tratamiento]], levels = .data[[tratamiento]]))
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  # Paleta sobria
  colores <- "steelblue"
  
  # -------------------------
  # 1. Boxplot
  # -------------------------
  print(
    ggplot(datos, aes(x=.data[[tratamiento]], y=.data[[var]])) +
      geom_boxplot(fill="gray70", color="black") +
      labs(title=paste("Boxplot -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 2. Medias con vigotes (vertical)
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media)) +
      geom_point(size=3, color=colores) +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Medias con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 3. Gráfico de líneas
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media, group=1)) +
      geom_line(size=1, color=colores) +
      geom_point(size=3, color=colores) +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Líneas con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 4. Medias con vigotes horizontales
  # -------------------------
  print(
    ggplot(resumen, aes(y=Trat_ordenado, x=media)) +
      geom_point(size=3, color=colores) +
      geom_errorbarh(aes(xmin=IC_inf, xmax=IC_sup), height=0.2, color="black") +
      labs(title=paste("Medias con IC95% (horizontal) -", var), x=var, y=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 5. Barras con IC95% (ordenadas)
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media)) +
      geom_col(fill=colores, color="black") +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Barras con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
}

###################################################################################################################

#DBCA:


#################Modelo: ANDEVA para cada variable---------------------------------------------------------------------------
ANDEVA<- aov(TCH ~ Tratamiento + Replica)
summary(ANDEVA)

###############--ANDEVA para todas las variables de respuesta----------------------------------------------------
colnames(datos)
tratamiento <- "Tratamiento"
as.factor(tratamiento)
respuestas<- c("TCH", "Brix", "Pol", "Pureza", "Jugo", "Fibra", "Humedad","Rendimiento")  #Agregar las variables de respuesta de interés


for (var in respuestas) {
  formula <- as.formula(paste0("`", var, "` ~ Tratamiento + Replica"))
  modelo <- aov(formula, data = datos)
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  print(summary(modelo))
}


################################# Verificación de supuestos para todas las variables de respuesta---------------------------------

for (var in respuestas) {
  
  # La fórmula ahora incluye el efecto del bloque (Replica)
  formula <- as.formula(paste0("`", var, "` ~ `", tratamiento, "` + Replica"))
  modelo <- aov(formula, data = datos)
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  cat("\n--- Verificación de supuestos ---\n")
  
  # 1. QQ-plot en pantalla
  qqPlot(modelo$residuals, main=paste("QQ-plot:", var), col="red", lwd=2, pch=16)
  
  # 2. Residuos vs Ajustados en pantalla
  plot(modelo$fitted.values, modelo$residuals,
       main=paste("Residuos vs Ajustados:", var),
       xlab="Valores Ajustados", ylab="Residuos", pch=16, col="blue")
  abline(h=0, col="red", lwd=2)
  
  # Shapiro-Wilk
  if(length(unique(modelo$residuals)) > 1){
    SW <- shapiro.test(modelo$residuals)
    cat("\nShapiro-Wilk para", var, ":\n")
    print(SW)
  } else {
    cat("\nShapiro-Wilk no se puede calcular: todos los residuos son idénticos.\n")
  }
  
  # Bartlett y Levene
  if(length(unique(datos[[var]])) > 1){
    cat("\nPrueba de Bartlett para", var, ":\n")
    # Estas pruebas deben usar el modelo simplificado que evalúa la homogeneidad
    # de varianzas entre los grupos de tratamiento, no los bloques.
    print(bartlett.test(as.formula(paste0("`", var, "` ~ `", tratamiento, "`")), data=datos))
    
    cat("\nPrueba de Levene para", var, ":\n")
    print(leveneTest(as.formula(paste0("`", var, "` ~ `", tratamiento, "`")), data=datos, center="median"))
  } else {
    cat("Bartlett y Levene no se pueden calcular: variable constante.\n")
  }
  
  cat("\n------------------------------------\n")
}

#########################----Prueba múltiple de medias para todas las variables de respuesta


for (var in respuestas) {
  
  # Crear un nombre seguro: prefijo "var_" + reemplazar caracteres especiales
  nombre_var <- paste0("var_", gsub("[^[:alnum:]_]", "_", var))
  
  # Ignorar nombres que queden vacíos o solo guiones
  if(grepl("^var_[_]*$", nombre_var)){
    cat("\nVariable", var, "omitida: nombre no válido para análisis.\n")
    next
  }
  
  # Crear dataframe temporal con nombre seguro
  datos_temp <- datos
  names(datos_temp)[names(datos_temp) == var] <- nombre_var
  
  # Crear modelo ANDEVA, ahora con el efecto de Replica
  formula <- as.formula(paste0("`", nombre_var, "` ~ `", tratamiento, "` + Replica"))
  modelo <- aov(formula, data = datos_temp)
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  # -------------------------
  # Tukey HSD
  # -------------------------
  if(length(unique(datos_temp[[nombre_var]])) > 1){
    cat("\n--- Tukey HSD ---\n")
    HSD.test(modelo, tratamiento, console=TRUE)
  } else {
    cat("\nTukey HSD no se puede calcular: variable constante.\n")
  }
  
  # -------------------------
  # Scott-Knott
  # -------------------------
  if(length(unique(datos_temp[[nombre_var]])) > 1){
    cat("\n--- Scott-Knott ---\n")
    sk <- SK(modelo, which=tratamiento, dispersion="se", sig.level=0.05)
    print(summary(sk))
  } else {
    cat("\nScott-Knott no se puede calcular: variable constante o sin variación.\n")
  }
  
  cat("\n------------------------------------\n")
}


###############################################--Análisis gráfico--######################################

for (var in respuestas) {
  
  # Resumen con medias e IC95%
  resumen <- datos %>%
    group_by(.data[[tratamiento]]) %>%
    summarise(
      media = mean(.data[[var]], na.rm=TRUE),
      sd = sd(.data[[var]], na.rm=TRUE),
      n = n(),
      se = sd / sqrt(n),
      IC_inf = media - qt(0.975, df=n-1) * se,
      IC_sup = media + qt(0.975, df=n-1) * se,
      .groups="drop"
    )
  
  # Ordenar tratamientos por la media
  resumen <- resumen %>%
    arrange(media) %>%
    mutate(Trat_ordenado = factor(.data[[tratamiento]], levels = .data[[tratamiento]]))
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  # Paleta sobria
  colores <- "steelblue"
  
  # -------------------------
  # 1. Boxplot
  # -------------------------
  print(
    ggplot(datos, aes(x=.data[[tratamiento]], y=.data[[var]])) +
      geom_boxplot(fill="gray70", color="black") +
      labs(title=paste("Boxplot -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 2. Medias con vigotes (vertical)
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media)) +
      geom_point(size=3, color=colores) +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Medias con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 3. Gráfico de líneas
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media, group=1)) +
      geom_line(size=1, color=colores) +
      geom_point(size=3, color=colores) +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Líneas con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 4. Medias con vigotes horizontales
  # -------------------------
  print(
    ggplot(resumen, aes(y=Trat_ordenado, x=media)) +
      geom_point(size=3, color=colores) +
      geom_errorbarh(aes(xmin=IC_inf, xmax=IC_sup), height=0.2, color="black") +
      labs(title=paste("Medias con IC95% (horizontal) -", var), x=var, y=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 5. Barras con IC95% (ordenadas)
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media)) +
      geom_col(fill=colores, color="black") +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Barras con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
}

##############################################################################################################

# DCL
#------------------Modelo: ANDEVA para cada variable-------------------------------------

andeva<- aov(TCH ~ Tratamiento + fila + col)
anova(andeva)

#--------------------------ANDEVA para todas las variables--------------------------------------

tratamiento <- "Tratamiento"
respuestas <- c("TCH", "Brix", "Pol", "Pureza", "%_Jugo", "%_Fibra", "%_Humedad","Rendimiento")
filas <- "Fila" 
columnas <- "Columna" 


###############--ANDEVA para todas las variables de respuesta----------------------------------------------------
colnames(datos)

for (var in respuestas) {
  formula <- as.formula(paste0("`", var, "` ~ Tratamiento + `", filas, "` + `", columnas, "`"))
  modelo <- aov(formula, data = datos)
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  print(summary(modelo))
}

---
  
  ################################# Verificación de supuestos para todas las variables de respuesta---------------------------------

for (var in respuestas) {
  
  # La fórmula del modelo para supuestos también debe incluir ambas variables de bloqueo
  formula <- as.formula(paste0("`", var, "` ~ `", tratamiento, "` + `", filas, "` + `", columnas, "`"))
  modelo <- aov(formula, data = datos)
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  cat("\n--- Verificación de supuestos ---\n")
  
  # 1. QQ-plot en pantalla
  qqPlot(modelo$residuals, main=paste("QQ-plot:", var), col="red", lwd=2, pch=16)
  
  # 2. Residuos vs Ajustados en pantalla
  plot(modelo$fitted.values, modelo$residuals,
       main=paste("Residuos vs Ajustados:", var),
       xlab="Valores Ajustados", ylab="Residuos", pch=16, col="blue")
  abline(h=0, col="red", lwd=2)
  
  # Shapiro-Wilk
  if(length(unique(modelo$residuals)) > 1){
    SW <- shapiro.test(modelo$residuals)
    cat("\nShapiro-Wilk para", var, ":\n")
    print(SW)
  } else {
    cat("\nShapiro-Wilk no se puede calcular: todos los residuos son idénticos.\n")
  }
  
  # Bartlett y Levene
  if(length(unique(datos[[var]])) > 1){
    cat("\nPrueba de Bartlett para", var, ":\n")
    # Estas pruebas de homocedasticidad solo evalúan el efecto del tratamiento
    print(bartlett.test(as.formula(paste0("`", var, "` ~ `", tratamiento, "`")), data=datos))
    
    cat("\nPrueba de Levene para", var, ":\n")
    print(leveneTest(as.formula(paste0("`", var, "` ~ `", tratamiento, "`")), data=datos, center="median"))
  } else {
    cat("Bartlett y Levene no se pueden calcular: variable constante.\n")
  }
  
  cat("\n------------------------------------\n")
}

---
  
  #########################----Prueba múltiple de medias para todas las variables de respuesta
  
  for (var in respuestas) {
    
    # Crear un nombre seguro
    nombre_var <- paste0("var_", gsub("[^[:alnum:]_]", "_", var))
    
    # Ignorar nombres que queden vacíos
    if(grepl("^var_[_]*$", nombre_var)){
      cat("\nVariable", var, "omitida: nombre no válido para análisis.\n")
      next
    }
    
    # Crear dataframe temporal
    datos_temp <- datos
    names(datos_temp)[names(datos_temp) == var] <- nombre_var
    
    # La fórmula para las PMM también incluye ambas variables de bloqueo
    formula <- as.formula(paste0("`", nombre_var, "` ~ `", tratamiento, "` + `", filas, "` + `", columnas, "`"))
    modelo <- aov(formula, data = datos_temp)
    
    cat("\n====================================\n")
    cat("Variable:", var, "\n")
    cat("====================================\n")
    
    # -------------------------
    # Tukey HSD
    # -------------------------
    if(length(unique(datos_temp[[nombre_var]])) > 1){
      cat("\n--- Tukey HSD ---\n")
      HSD.test(modelo, tratamiento, console=TRUE)
    } else {
      cat("\nTukey HSD no se puede calcular: variable constante.\n")
    }
    
    # -------------------------
    # Scott-Knott
    # -------------------------
    if(length(unique(datos_temp[[nombre_var]])) > 1){
      cat("\n--- Scott-Knott ---\n")
      sk <- SK(modelo, which=tratamiento, dispersion="se", sig.level=0.05)
      print(summary(sk))
    } else {
      cat("\nScott-Knott no se puede calcular: variable constante o sin variación.\n")
    }
    
    cat("\n------------------------------------\n")
  }

---
  
  ###############################################--Análisis gráfico--######################################

for (var in respuestas) {
  # Resumen con medias e IC95%
  resumen <- datos %>%
    group_by(.data[[tratamiento]]) %>%
    summarise(
      media = mean(.data[[var]], na.rm=TRUE),
      sd = sd(.data[[var]], na.rm=TRUE),
      n = n(),
      se = sd / sqrt(n),
      IC_inf = media - qt(0.975, df=n-1) * se,
      IC_sup = media + qt(0.975, df=n-1) * se,
      .groups="drop"
    )
  
  # Ordenar tratamientos por la media
  resumen <- resumen %>%
    arrange(media) %>%
    mutate(Trat_ordenado = factor(.data[[tratamiento]], levels = .data[[tratamiento]]))
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  # Paleta sobria
  colores <- "steelblue"
  
  # -------------------------
  # 1. Boxplot
  # -------------------------
  print(
    ggplot(datos, aes(x=.data[[tratamiento]], y=.data[[var]])) +
      geom_boxplot(fill="gray70", color="black") +
      labs(title=paste("Boxplot -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 2. Medias con vigotes (vertical)
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media)) +
      geom_point(size=3, color=colores) +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Medias con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 3. Gráfico de líneas
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media, group=1)) +
      geom_line(size=1, color=colores) +
      geom_point(size=3, color=colores) +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Líneas con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 4. Medias con vigotes horizontales
  # -------------------------
  print(
    ggplot(resumen, aes(y=Trat_ordenado, x=media)) +
      geom_point(size=3, color=colores) +
      geom_errorbarh(aes(xmin=IC_inf, xmax=IC_sup), height=0.2, color="black") +
      labs(title=paste("Medias con IC95% (horizontal) -", var), x=var, y=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 5. Barras con IC95% (ordenadas)
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media)) +
      geom_col(fill=colores, color="black") +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Barras con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
}


#--------------------------------------------------------------------------------------------------------------
###############################--Experimentos factoriales (Arreglo factorial combinatorio)--##################################################################

# DCA:
#-------------------------Modelo: ANDEVA para una variable-------------------------------------------
colnames(datos)
FA<- as.factor(Vinaza)                   #Agregar los factores que sean necesarios
FB<- as.factor(N_kg)
VR<- as.vector(Rendimiento)
y<- as.numeric(VR)

andeva<- aov(y~FA*FB)
anova(andeva)





#----------------------ANDEVA para todas las variables---------------------------------
colnames(datos)

factores <- c("Vinaza", "N_kg")
for (f in factores) {
  datos[[f]] <- as.factor(datos[[f]])
}

respuestas <- c("TCH", "Brix", "Pol", "Pureza", "Jugo", "Fibra", "Humedad","Rendimiento")

for (var in respuestas) {
  # Construir la fórmula dinámica
  formula_anidada <- paste(factores, collapse = "*")
  formula <- as.formula(paste0("`", var, "` ~ ", formula_anidada))
  
  # Ajustar modelo ANDEVA
  modelo <- aov(formula, data = datos)
  
  cat("\n====================================\n")
  cat("ANDEVA para la variable:", var, "\n")
  cat("====================================\n")
  
  print(summary(modelo))
}

####################################### Verificación de supuestos para todas las variables de respuesta

for (var in respuestas) {
  # Modelo para supuestos con todas las interacciones
  formula_anidada <- paste(factores, collapse = "*")
  formula <- as.formula(paste0("`", var, "` ~ ", formula_anidada))
  modelo <- aov(formula, data = datos)
  
  cat("\n====================================\n")
  cat("Supuestos para la variable:", var, "\n")
  cat("====================================\n")
  
  cat("\n--- Verificación de supuestos ---\n")
  
  # 1. QQ-plot y Shapiro-Wilk para normalidad de los residuos
  qqPlot(modelo$residuals, main = paste("QQ-plot:", var), col = "red", lwd = 2, pch = 16)
  if (length(unique(modelo$residuals)) > 1) {
    SW <- shapiro.test(modelo$residuals)
    cat("\nShapiro-Wilk para", var, ":\n")
    print(SW)
  } else {
    cat("\nShapiro-Wilk no se puede calcular: todos los residuos son idénticos.\n")
  }
  
  # 2. Residuos vs Ajustados para homocedasticidad
  plot(modelo$fitted.values, modelo$residuals,
       main = paste("Residuos vs Ajustados:", var),
       xlab = "Valores Ajustados", ylab = "Residuos", pch = 16, col = "blue")
  abline(h = 0, col = "red", lwd = 2)
  
  # 3. Pruebas de homocedasticidad (Bartlett y Levene)
  cat("\nPrueba de Bartlett para", var, ":\n")
  # Para Bartlett y Levene, se usa una variable de interacción que agrupa todos los factores
  interaccion_completa <- paste(factores, collapse = ":")
  formula_interaccion <- as.formula(paste0("`", var, "` ~ ", "interaction(", interaccion_completa, ")"))
  
  if (length(unique(datos[[var]])) > 1) {
    tryCatch({
      print(bartlett.test(formula_interaccion, data = datos))
    }, error = function(e) {
      cat("Error al ejecutar bartlett.test:", e$message, "\n")
    })
    
    cat("\nPrueba de Levene para", var, ":\n")
    tryCatch({
      print(leveneTest(formula_interaccion, data = datos, center = "median"))
    }, error = function(e) {
      cat("Error al ejecutar leveneTest:", e$message, "\n")
    })
  } else {
    cat("Bartlett y Levene no se pueden calcular: variable constante.\n")
  }
}



###################--Prueba múltiple de medias para todas las variables de respuesta-################

# Aseguramos que los factores realmente sean factores
for (f in factores) {
  datos[[f]] <- as.factor(datos[[f]])
}

for (var in respuestas) {
  cat("\n====================================\n")
  cat("PMM para la variable:", var, "\n")
  cat("====================================\n")
  
  # ======================
  # Interacción completa
  # ======================
  datos$interaccion_completa <- interaction(datos[, factores], sep = "_")
  modelo_interaccion <- aov(as.formula(paste0("`", var, "` ~ interaccion_completa")), data = datos)
  
  if (length(unique(datos[[var]])) > 1) {
    cat("\n--- Tukey HSD para interacción completa ---\n")
    HSD.test(modelo_interaccion, "interaccion_completa", console = TRUE)
    
    cat("\n--- Scott-Knott para interacción completa ---\n")
    tryCatch({
      sk <- SK(modelo_interaccion, which = "interaccion_completa", dispersion = "se", sig.level = 0.05)
      print(summary(sk))
    }, error = function(e) {
      cat("⚠️ Error en Scott-Knott (interacción):", e$message, "\n")
    })
  } else {
    cat("Pruebas de medias no se pueden calcular: variable constante.\n")
  }
  
  # ======================
  # Factores individuales
  # ======================
  for (f in factores) {
    cat("\n--- Tukey HSD para factor:", f, "---\n")
    modelo_factor <- aov(as.formula(paste0("`", var, "` ~ ", f)), data = datos)
    HSD.test(modelo_factor, f, console = TRUE)
    
    cat("\n--- Scott-Knott para factor:", f, "---\n")
    tryCatch({
      sk_f <- SK(modelo_factor, which = f, dispersion = "se", sig.level = 0.05)
      print(summary(sk_f))
    }, error = function(e) {
      cat("⚠️ Error en Scott-Knott para", f, ":", e$message, "\n")
    })
  }
  
  # Eliminar columna temporal de interacción
  datos$interaccion_completa <- NULL
  
  cat("\n------------------------------------\n")
}


########### Análisis gráfico: Gráfico de interacciones--###################################

for (var in respuestas) {
  cat("\n====================================\n")
  cat("Gráficos para:", var, "\n")
  cat("====================================\n")
  
  # ---------------------------------------------
  # Factores individuales
  # ---------------------------------------------
  for (f in factores) {
    resumen_factor <- datos %>%
      group_by(.data[[f]]) %>%
      summarise(media = mean(.data[[var]], na.rm = TRUE),
                se = sd(.data[[var]], na.rm = TRUE)/sqrt(n()),
                .groups = "drop")
    
    # Barras con vigotes
    p_barra <- ggplot(resumen_factor, aes(x = .data[[f]], y = media)) +
      geom_bar(stat = "identity", fill = "gray70", color = "black") +
      geom_errorbar(aes(ymin = media - se, ymax = media + se), width = 0.2) +
      labs(title = paste("Barras -", f, "-", var), x = f, y = var) +
      theme_minimal()
    print(p_barra)
    
    # Puntos con vigotes
    p_punto <- ggplot(resumen_factor, aes(x = .data[[f]], y = media)) +
      geom_point(size = 3, color = "steelblue") +
      geom_errorbar(aes(ymin = media - se, ymax = media + se), width = 0.2) +
      labs(title = paste("Puntos -", f, "-", var), x = f, y = var) +
      theme_minimal()
    print(p_punto)
    
    # Boxplot individual
    p_box <- ggplot(datos, aes(x = .data[[f]], y = .data[[var]])) +
      geom_boxplot(fill="lightblue") +
      labs(title = paste("Boxplot -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p_box)
  }
  
  # ---------------------------------------------
  # Interacciones
  # ---------------------------------------------
  if(length(factores) > 1) {
    factor1 <- factores[1]
    factor2 <- factores[2]
    
    resumen_interaccion <- datos %>%
      group_by(.data[[factor1]], .data[[factor2]]) %>%
      summarise(media = mean(.data[[var]], na.rm=TRUE),
                se = sd(.data[[var]], na.rm=TRUE)/sqrt(n()),
                .groups="drop") %>%
      ungroup()
    
    resumen_interaccion <- resumen_interaccion %>%
      mutate(Interaccion = interaction(.data[[factor1]], .data[[factor2]]))
    
    # Línea de interacción limpia
    p_lineas <- ggplot(resumen_interaccion, aes(x=.data[[factor1]], y=media, group=.data[[factor2]], color=.data[[factor2]])) +
      geom_line(size=1.2) +
      geom_point(size=3) +
      labs(title=paste("Interacción líneas -", factor1, "x", factor2, "-", var),
           x=factor1, y=var, color=factor2) +
      theme_minimal()
    print(p_lineas)
    
    # Barras de interacción con vigotes
    p_barras <- ggplot(resumen_interaccion, aes(x=Interaccion, y=media)) +
      geom_bar(stat="identity", fill="lightcoral", color="black") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Barras de interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_barras)
    
    # Puntos de interacción (limpios)
    p_puntos <- ggplot(resumen_interaccion, aes(x=Interaccion, y=media)) +
      geom_point(size=3, color="firebrick") +
      labs(title=paste("Puntos de interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_puntos)
    
    # Boxplot de interacción
    p_box_inter <- ggplot(datos, aes(x=interaction(.data[[factor1]], .data[[factor2]]), y=.data[[var]])) +
      geom_boxplot(fill="lightgreen") +
      labs(title=paste("Boxplot de interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_box_inter)
  }
}

#---------------------------------------------------------------------------
# DBCA:
################################--ANDEVA para todas las variables de respuesta----------

factores <- c("Vinaza", "N_kg") 
for (f in factores) {
  datos[[f]] <- as.factor(datos[[f]])
}

respuestas <- c("TCH", "Brix", "Pol", "Pureza", "Jugo", "Fibra", "Humedad","Rendimiento")

for (var in respuestas) {
  formula_anidada <- paste(factores, collapse = "*")
  formula <- as.formula(paste0("`", var, "` ~ Replica + ", formula_anidada))  # bloque agregado
  
  modelo <- aov(formula, data = datos)
  
  cat("\n====================================\n")
  cat("ANDEVA para la variable:", var, "\n")
  cat("====================================\n")
  
  print(summary(modelo))
}


######################### Verificación de supuestos para todas las variables de respuesta

for (var in respuestas) {
  formula <- as.formula(paste0("`", var, "` ~ Replica + ", paste(factores, collapse = "*")))
  modelo <- aov(formula, data = datos)
  
  # QQ-plot y Shapiro-Wilk
  qqPlot(modelo$residuals, main = paste("QQ-plot:", var), col = "red", lwd = 2, pch = 16)
  if(length(unique(modelo$residuals)) > 1){
    SW <- shapiro.test(modelo$residuals)
    cat("\nShapiro-Wilk para", var, ":\n")
    print(SW)
  }
  
  # Residuos vs Ajustados
  plot(modelo$fitted.values, modelo$residuals,
       main=paste("Residuos vs Ajustados:", var),
       xlab="Valores Ajustados", ylab="Residuos", pch=16, col="blue")
  abline(h=0, col="red", lwd=2)
  
  # Bartlett y Levene usando interacción de factores de tratamiento
  formula_interaccion <- as.formula(paste0("`", var, "` ~ interaction(", paste(factores, collapse = ":"), ")"))
  
  if(length(unique(datos[[var]])) > 1){
    cat("\nPrueba de Bartlett para", var, ":\n")
    tryCatch({
      print(bartlett.test(formula_interaccion, data = datos))
    }, error = function(e){cat("Error Bartlett:", e$message, "\n")})
    
    cat("\nPrueba de Levene para", var, ":\n")
    tryCatch({
      print(leveneTest(formula_interaccion, data = datos, center="median"))
    }, error = function(e){cat("Error Levene:", e$message, "\n")})
  }
}
###########################--Prueba múltiple de medias (Tukey y Scott-Knott)------

# Convertir factores a factor
for (f in factores) {
  datos[[f]] <- as.factor(datos[[f]])
}


for (var in respuestas) {
  cat("\n====================================\n")
  cat("Pruebas de medias para la variable:", var, "\n")
  cat("====================================\n")
  
  # Interacción completa
  cat("\n--- Interacción completa ---\n")
  datos$interaccion_completa <- interaction(datos[, factores], sep = "_")
  modelo_interaccion <- aov(as.formula(paste0("`", var, "` ~ interaccion_completa")), data = datos)
  
  if(length(unique(datos[[var]])) > 1){
    cat("\nTukey HSD - Interacción completa:\n")
    HSD.test(modelo_interaccion, "interaccion_completa", console = TRUE)
    
    cat("\nScott-Knott - Interacción completa:\n")
    try({
      sk <- SK(modelo_interaccion, which="interaccion_completa", dispersion="se", sig.level=0.05)
      print(summary(sk))
    })
  } else {
    cat("Pruebas de medias no se pueden calcular: variable constante.\n")
  }
  
  # Factores individuales
  for (f in factores) {
    cat("\n--- Factor:", f, "---\n")
    modelo_factor <- aov(as.formula(paste0("`", var, "` ~ ", f)), data = datos)
    
    cat("\nTukey HSD - Factor", f, ":\n")
    HSD.test(modelo_factor, f, console = TRUE)
    
    cat("\nScott-Knott - Factor", f, ":\n")
    try({
      sk_f <- SK(modelo_factor, which=f, dispersion="se", sig.level=0.05)
      print(summary(sk_f))
    })
  }
  
  datos$interaccion_completa <- NULL
}


############################ Análisis gráfico
# ---------------------------------------------
for (var in respuestas) {
  cat("\n====================================\n")
  cat("Gráficos para:", var, "\n")
  cat("====================================\n")
  
  # Factores individuales
  for (f in factores) {
    resumen_factor <- datos %>%
      group_by(.data[[f]]) %>%
      summarise(media = mean(.data[[var]], na.rm = TRUE),
                se = sd(.data[[var]], na.rm = TRUE)/sqrt(n()),
                .groups = "drop")
    
    # Barras con vigotes
    p_barra <- ggplot(resumen_factor, aes(x = .data[[f]], y = media)) +
      geom_bar(stat="identity", fill="gray70", color="black") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Barras -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p_barra)
    
    # Puntos con vigotes
    p_punto <- ggplot(resumen_factor, aes(x = .data[[f]], y = media)) +
      geom_point(size=3, color="steelblue") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Puntos -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p_punto)
    
    # Boxplot
    p_box <- ggplot(datos, aes(x=.data[[f]], y=.data[[var]])) +
      geom_boxplot(fill="lightblue") +
      labs(title=paste("Boxplot -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p_box)
  }
  
  # Interacción
  if(length(factores) > 1) {
    factor1 <- factores[1]
    factor2 <- factores[2]
    
    resumen_interaccion <- datos %>%
      group_by(.data[[factor1]], .data[[factor2]]) %>%
      summarise(media = mean(.data[[var]], na.rm=TRUE),
                se = sd(.data[[var]], na.rm=TRUE)/sqrt(n()),
                .groups="drop") %>%
      ungroup() %>%
      mutate(Interaccion = interaction(.data[[factor1]], .data[[factor2]]))
    
    # Línea de interacción limpia
    p_lineas <- ggplot(resumen_interaccion, aes(x=.data[[factor1]], y=media, group=.data[[factor2]], color=.data[[factor2]])) +
      geom_line(size=1.2) +
      geom_point(size=3) +
      labs(title=paste("Interacción líneas -", factor1, "x", factor2, "-", var),
           x=factor1, y=var, color=factor2) +
      theme_minimal()
    print(p_lineas)
    
    # Barras de interacción con vigotes
    p_barras <- ggplot(resumen_interaccion, aes(x=Interaccion, y=media)) +
      geom_bar(stat="identity", fill="lightcoral", color="black") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Barras interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_barras)
    
    # Puntos de interacción con vigotes
    p_puntos <- ggplot(resumen_interaccion, aes(x=Interaccion, y=media)) +
      geom_point(size=3, color="firebrick") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Puntos interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_puntos)
    
    # Boxplot de interacción
    p_box_inter <- ggplot(datos, aes(x=interaction(.data[[factor1]], .data[[factor2]]), y=.data[[var]])) +
      geom_boxplot(fill="lightgreen") +
      labs(title=paste("Boxplot interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_box_inter)
  }
}


###############################--Experimento factorial con arreglo en parcelas divididas--#############################

# DCA:
#-------------------------Modelo: ANDEVA para una variable-------------------------------------------
colnames(datos)
FA<- as.factor(Vinaza)
FB<- as.factor(N_kg)
rep<- as.factor(Replica)
VR<- as.vector(TCH)
y<- as.numeric(VR)

andeva<- aov(y~FA+FB+Error(rep/FA)+FA:FB)
summary(andeva)
#----------------------ANDEVA para todas las variables---------------------------------

factores <- c("Vinaza", "N_kg")
rep <- "Replica"
respuestas <- c("TCH", "Brix", "Pol", "Pureza", "Jugo", "Fibra", "Humedad","Rendimiento")

for(f in c(factores, rep)) datos[[f]] <- as.factor(datos[[f]]) # Aseguramos que los factores y réplica sean factores


for(var in respuestas){
  cat("\n====================================\n")
  cat("ANDEVA para la variable:", var, "\n")
  cat("====================================\n")
  
  # Construir fórmula para parcelas divididas
  formula_anidada <- paste0("`", var, "` ~ ", factores[1], " + Error(", rep, "/", factores[1], ") + ",
                            factores[2], " + ", factores[1], ":", factores[2])
  
  modelo <- aov(as.formula(formula_anidada), data = datos)
  print(summary(modelo))
}

############################ Verificación de supuestos ############################
for(var in respuestas){
  
  # Modelo con único error (residual) para pruebas de supuestos
  formula_modelo <- paste0("`", var, "` ~ ", factores[1], "*", factores[2], " + ", rep, "/", factores[1])
  modelo <- aov(as.formula(formula_modelo), data = datos)
  
  cat("\n====================================\n")
  cat("Supuestos para la variable:", var, "\n")
  cat("====================================\n")
  
  # QQ-plot y Shapiro-Wilk
  qqPlot(modelo$residuals, main=paste("QQ-plot:", var), col="red", lwd=2, pch=16)
  if(length(unique(modelo$residuals))>1){
    cat("\nShapiro-Wilk:\n")
    print(shapiro.test(modelo$residuals))
  }
  
  # Residuos vs Ajustados
  plot(modelo$fitted.values, modelo$residuals, col="blue", pch=16,
       xlab="Valores Ajustados", ylab="Residuos",
       main=paste("Residuos vs Ajustados:", var))
  abline(h=0, col="red", lwd=2)
  
  # Homocedasticidad (Bartlett y Levene)
  formula_interaccion <- as.formula(paste0("`", var, "` ~ interaction(", factores[1], ",", factores[2], ")"))
  if(length(unique(datos[[var]]))>1){
    cat("\nBartlett test:\n")
    print(bartlett.test(formula_interaccion, data=datos))
    cat("\nLevene test (mediana):\n")
    print(leveneTest(formula_interaccion, data=datos, center="median"))
  }
}

############################ PMM para factores e interacción ############################
for(var in respuestas){
  cat("\n====================================\n")
  cat("PMM para la variable:", var, "\n")
  cat("====================================\n")
  
  # Interacción completa
  datos$interaccion_completa <- interaction(datos[, factores], sep="_")
  modelo_interaccion <- aov(as.formula(paste0("`", var, "` ~ interaccion_completa")), data=datos)
  
  if(length(unique(datos[[var]]))>1){
    cat("\n--- Tukey HSD para interacción ---\n")
    HSD.test(modelo_interaccion, "interaccion_completa", console=TRUE)
    
    cat("\n--- Scott-Knott para interacción ---\n")
    try({sk <- SK(modelo_interaccion, which="interaccion_completa", dispersion="se", sig.level=0.05); print(summary(sk))})
  }
  
  # Factores individuales
  for(f in factores){
    modelo_factor <- aov(as.formula(paste0("`", var, "` ~ ", f)), data=datos)
    
    cat("\n--- Tukey HSD para factor:", f, "---\n")
    HSD.test(modelo_factor, f, console=TRUE)
    
    cat("\n--- Scott-Knott para factor:", f, "---\n")
    try({sk_f <- SK(modelo_factor, which=f, dispersion="se", sig.level=0.05); print(summary(sk_f))})
  }
  
  datos$interaccion_completa <- NULL
}

############################ Gráficos ############################
for(var in respuestas){
  cat("\n====================================\n")
  cat("Gráficos para:", var, "\n")
  cat("====================================\n")
  
  # ---------------------------------------------
  # Factores individuales
  # ---------------------------------------------
  for(f in factores){
    resumen <- datos %>%
      group_by(.data[[f]]) %>%
      summarise(media=mean(.data[[var]], na.rm=TRUE),
                se=sd(.data[[var]], na.rm=TRUE)/sqrt(n()), 
                .groups="drop") %>%
      arrange(media) %>%
      mutate(factor_ordenado=factor(.data[[f]], levels=.data[[f]]))
    
    # Barras ascendentes con vigotes
    p1 <- ggplot(resumen, aes(x=factor_ordenado, y=media)) +
      geom_bar(stat="identity", fill="gray70", color="black") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Barras -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p1)
    
    # Puntos con vigotes de error
    p2 <- ggplot(resumen, aes(x=factor_ordenado, y=media)) +
      geom_point(size=3, color="steelblue") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Puntos con error -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p2)
    
    # Boxplot
    p_box <- ggplot(datos, aes(x=.data[[f]], y=.data[[var]])) +
      geom_boxplot(fill="lightblue") +
      labs(title=paste("Boxplot -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p_box)
  }
  
  # ---------------------------------------------
  # Interacción entre factores
  # ---------------------------------------------
  if(length(factores) > 1){
    factor1 <- factores[1]
    factor2 <- factores[2]
    
    # Resumen para línea de interacción (sin vigotes)
    resumen_linea <- datos %>%
      group_by(.data[[factor1]], .data[[factor2]]) %>%
      summarise(media=mean(.data[[var]], na.rm=TRUE), .groups="drop") %>%
      ungroup() %>%
      mutate(interaccion=interaction(.data[[factor1]], .data[[factor2]]))
    
    # Línea de interacción limpia
    p_line <- ggplot(resumen_linea, aes(x=.data[[factor1]], y=media, group=.data[[factor2]], color=.data[[factor2]])) +
      geom_line(size=1.2) +
      geom_point(size=3) +
      labs(title=paste("Interacción líneas -", factor1, "x", factor2, "-", var),
           x=factor1, y=var, color=factor2) +
      theme_minimal()
    print(p_line)
    
    # Resumen para barras y puntos con vigotes
    resumen_barras <- datos %>%
      group_by(.data[[factor1]], .data[[factor2]]) %>%
      summarise(media=mean(.data[[var]], na.rm=TRUE),
                se=sd(.data[[var]], na.rm=TRUE)/sqrt(n()), .groups="drop") %>%
      ungroup() %>%
      mutate(interaccion=interaction(.data[[factor1]], .data[[factor2]]))
    
    # Barras de interacción con vigotes
    p_bar <- ggplot(resumen_barras, aes(x=interaccion, y=media)) +
      geom_bar(stat="identity", fill="lightcoral", color="black") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Barras de interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_bar)
    
    # Puntos de interacción con vigotes
    p_point <- ggplot(resumen_barras, aes(x=interaccion, y=media)) +
      geom_point(size=3, color="firebrick") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Puntos de interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_point)
    
    # Boxplot de interacción
    p_box_inter <- ggplot(datos, aes(x=interaction(.data[[factor1]], .data[[factor2]]), y=.data[[var]])) +
      geom_boxplot(fill="lightgreen") +
      labs(title=paste("Boxplot interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_box_inter)
  }
}

####################################-----DBCA:-############
FA<- as.factor(Vinaza)
FB<- as.factor(N_kg)
bloq<- as.factor(Replica)
VR<- as.vector(TCH)
y<- as.numeric(VR)  

andeva<- aov(y~FA+FB+bloq+Error(bloq/FA)+FA*FB)
summary(andeva)
#----------------------ANDEVA para todas las variables---------------------------------

factores <- c("Vinaza", "N_kg")
bloq <- "Replica"
respuestas <- c("TCH", "Brix", "Pol", "Pureza", "Jugo", "Fibra", "Humedad","Rendimiento")

for(f in c(factores, bloq)){
  datos[[f]] <- as.factor(datos[[f]])
}

# ANDEVA
for(var in respuestas){
  cat("\n====================================\n")
  cat("ANDEVA para la variable:", var, "\n")
  cat("====================================\n")
  
  formula_anidada <- paste0("`", var, "` ~ ", factores[1], "+", factores[2], "+", bloq, "+",
                            factores[1], ":", factores[2], "+ Error(", bloq,"/",factores[1],")")
  
  modelo <- aov(as.formula(formula_anidada), data = datos)
  print(summary(modelo))
}

# Verificación de supuestos
for(var in respuestas){
  formula_modelo <- paste0("`", var, "` ~ ", factores[1], "*", factores[2], "+", bloq, "/", factores[1])
  modelo <- aov(as.formula(formula_modelo), data = datos)
  
  cat("\n====================================\n")
  cat("Supuestos para la variable:", var, "\n")
  cat("====================================\n")
  
  qqPlot(modelo$residuals, main=paste("QQ-plot:", var), col="red", lwd=2, pch=16)
  if(length(unique(modelo$residuals))>1){
    cat("\nShapiro-Wilk:\n")
    print(shapiro.test(modelo$residuals))
  }
  
  plot(modelo$fitted.values, modelo$residuals, col="blue", pch=16,
       xlab="Valores Ajustados", ylab="Residuos",
       main=paste("Residuos vs Ajustados:", var))
  abline(h=0, col="red", lwd=2)
  
  formula_interaccion <- as.formula(paste0("`", var, "` ~ interaction(", factores[1], ",", factores[2], ")"))
  if(length(unique(datos[[var]]))>1){
    cat("\nBartlett test:\n")
    print(bartlett.test(formula_interaccion, data=datos))
    cat("\nLevene test (mediana):\n")
    print(leveneTest(formula_interaccion, data=datos, center="median"))
  }
}

####################---------- PMM------------------------

for(var in respuestas){
  cat("\n====================================\n")
  cat("PMM para la variable:", var, "\n")
  cat("====================================\n")
  
  # Interacción completa
  datos$interaccion_completa <- interaction(datos[, factores], sep="_")
  modelo_interaccion <- aov(as.formula(paste0("`", var, "` ~ interaccion_completa")), data=datos)
  
  if(length(unique(datos[[var]]))>1){
    cat("\n--- Tukey HSD para interacción ---\n")
    HSD.test(modelo_interaccion, "interaccion_completa", console=TRUE)
    
    cat("\n--- Scott-Knott para interacción ---\n")
    try({sk <- SK(modelo_interaccion, which="interaccion_completa", dispersion="se", sig.level=0.05); print(summary(sk))})
  }
  
  # Factores individuales
  for(f in factores){
    modelo_factor <- aov(as.formula(paste0("`", var, "` ~ ", f)), data=datos)
    
    cat("\n--- Tukey HSD para factor:", f, "---\n")
    HSD.test(modelo_factor, f, console=TRUE)
    
    cat("\n--- Scott-Knott para factor:", f, "---\n")
    try({sk_f <- SK(modelo_factor, which=f, dispersion="se", sig.level=0.05); print(summary(sk_f))})
  }
  
  datos$interaccion_completa <- NULL
}

# Gráficos
for(var in respuestas){
  cat("\n====================================\n")
  cat("Gráficos para:", var, "\n")
  cat("====================================\n")
  
  # Factores individuales
  for(f in factores){
    resumen <- datos %>%
      group_by(.data[[f]]) %>%
      summarise(media=mean(.data[[var]], na.rm=TRUE),
                se=sd(.data[[var]], na.rm=TRUE)/sqrt(n()), 
                .groups="drop")
    
    # Barras con error
    p_bar <- ggplot(resumen, aes(x=.data[[f]], y=media)) +
      geom_bar(stat="identity", fill="gray70", color="black") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Barras -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p_bar)
    
    # Puntos con error
    p_point <- ggplot(resumen, aes(x=.data[[f]], y=media)) +
      geom_point(size=3, color="steelblue") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Puntos -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p_point)
    
    # Boxplot
    p_box <- ggplot(datos, aes(x=.data[[f]], y=.data[[var]])) +
      geom_boxplot(fill="lightblue") +
      labs(title=paste("Boxplot -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p_box)
  }
  
  # Interacción 
  if(length(factores)>1){
    factor1 <- factores[1]
    factor2 <- factores[2]
    
    resumen_linea <- datos %>%
      group_by(.data[[factor1]], .data[[factor2]]) %>%
      summarise(media=mean(.data[[var]], na.rm=TRUE), .groups="drop")
    
    # Línea de interacción
    p_line <- ggplot(resumen_linea, aes(x=.data[[factor1]], y=media, group=.data[[factor2]], color=.data[[factor2]])) +
      geom_line(size=1.2) +
      geom_point(size=3) +
      labs(title=paste("Interacción líneas -", factor1, "x", factor2, "-", var),
           x=factor1, y=var, color=factor2) +
      theme_minimal()
    print(p_line)
    
    # Barras de interacción
    resumen_barras <- datos %>%
      group_by(.data[[factor1]], .data[[factor2]]) %>%
      summarise(media=mean(.data[[var]], na.rm=TRUE),
                se=sd(.data[[var]], na.rm=TRUE)/sqrt(n()), .groups="drop") %>%
      ungroup() %>%
      mutate(interaccion=interaction(.data[[factor1]], .data[[factor2]]))
    
    p_bar_int <- ggplot(resumen_barras, aes(x=interaccion, y=media)) +
      geom_bar(stat="identity", fill="lightcoral", color="black") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Barras interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_bar_int)
    
    # Puntos de interacción
    p_point_int <- ggplot(resumen_barras, aes(x=interaccion, y=media)) +
      geom_point(size=3, color="firebrick") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Puntos interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_point_int)
    
    # Boxplot interacción
    p_box_int <- ggplot(datos, aes(x=interaction(.data[[factor1]], .data[[factor2]]), y=.data[[var]])) +
      geom_boxplot(fill="lightgreen") +
      labs(title=paste("Boxplot interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_box_int)
  }
}


##############################################################################################################
### Análisis de componentes principales (PCA)

library(FactoMineR)
library(factoextra)
library(missMDA)

# Seleccionamos solo las variables cuantitativas
variables <- datos[, respuestas]

# Imputamos los NA usando PCA (elige ncp = número de componentes a estimar, ej: 2)
imput <- imputePCA(variables, ncp = 2)  

# Extraemos los datos imputados
variables_imputadas <- imput$completeObs

# Ejecutamos PCA con las variables imputadas
pca <- PCA(variables_imputadas, scale.unit = TRUE, graph = FALSE)

# -------------------------------
# Gráfico de individuos
# -------------------------------
fviz_pca_ind(pca, 
             geom.ind = "point",
             col.ind = datos$Tratamiento,   # variable categórica para colorear
             palette = "jco",
             addEllipses = TRUE,
             legend.title = "Grupo")

# -------------------------------
# Biplot (individuos + variables)
# -------------------------------
fviz_pca_biplot(pca, 
                col.ind = datos$Tratamiento,
                palette = "jco",
                addEllipses = TRUE,
                label = "var",
                col.var = "black")

# -------------------------------
# Biplot
# -------------------------------
fviz_pca_var(pca,
             col.var = "contrib",      # colorea según contribución al eje
             gradient.cols = c("blue", "blue", "red"),
             repel = TRUE)             # evita que se sobrepongan etiquetas

#####################################################################################################
## Análisis de covarianza (ANCOVA)

# Aseguramos que el factor sea factor y la covariable numérica
datos$Tratamiento <- as.factor(datos$Tratamiento)
datos$N_kg <- as.numeric(datos$Jugo, datos$Humedad)

# Variable de respuesta
vr <- "TCH"

# ---------------- ANCOVA ----------------
ancova <- aov(as.formula(paste0(vr, " ~ Tratamiento + Jugo + Humedad")), data = datos)
summary(ancova)

# Comparación de modelos para homogeneidad de pendientes
ancova_int <- aov(as.formula(paste0(vr, " ~ Vinaza * N_kg")), data = datos)
anova(ancova, ancova_int)  # verificar si interacción significativa

# ---------------- Supuestos ----------------

# Normalidad
shapiro.test(ancova$residuals)
qqPlot(ancova$residuals, col="red", pch=16)

# Homocedasticidad
leveneTest(as.formula(paste0(vr, " ~ Vinaza")), data=datos, center="mean")

# Independencia
dwtest(ancova)

# Residuos vs valores ajustados
plot(ancova$fitted.values, ancova$residuals, col="blue", pch=16,
     xlab="Valores ajustados", ylab="Residuos", main="Residuos vs Ajustados")
abline(h=0, col="red", lwd=2)

# ---------------- PMM / Medias ajustadas ----------------
medias_ajustadas <- emmeans(ancova, ~ Tratamiento)
print(medias_ajustadas)

# Comparaciones Tukey
tukey <- pairs(medias_ajustadas, adjust="tukey")
summary(tukey)

# Scott-Knott
sk <- SK(ancova, which="Tratamiento", dispersion="se", sig.level=0.05)
summary(sk)

# ---------------- Gráficos ----------------

# Barras con medias ajustadas y vigotes
medias_df <- as.data.frame(summary(medias_ajustadas))
ggplot(medias_df, aes(x=Tratamiento, y=emmean, fill=Tratamiento)) +
  geom_bar(stat="identity", color="black") +
  geom_errorbar(aes(ymin=lower.CL, ymax=upper.CL), width=0.2) +
  labs(x="Tratamiento", y=paste("Media ajustada de", vr),
       title=paste("Medias ajustadas de", vr, "por Tratamiento")) +
  theme_minimal()

# Boxplot de la variable de respuesta por factor
ggplot(datos, aes(x=Tratamiento, y=.data[[vr]], fill=Tratamiento)) +
  geom_boxplot() +
  labs(title=paste("Boxplot de", vr, "por Vinaza"), x="Vinaza", y=vr) +
  theme_minimal()
################################################################################################



##--Modelo lineal mixto (MLM)-------------------------------------------

modelo_mixto <- lmer(TCH ~ Tratamiento + (1 | Replica), data = datos, REML = TRUE)
summary(modelo_mixto)
anova(modelo_mixto)
print(modelo_mixto)
anova(modelo_mixto)

# Verificación de supuestos
res <- resid(modelo_mixto)
shapiro.test(res)

# QQ-plot
qqPlot(res, col="red", pch=16, main="QQ-Plot de residuos")
leveneTest(res ~ Tratamiento, data = datos, center = "mean")

fit <- fitted(modelo_mixto)
dwtest(lm(res ~ fit))

plot(fit, res, col="blue", pch=16,
     xlab="Valores ajustados", ylab="Residuos",
     main="Residuos vs Ajustados")
abline(h=0, col="red", lwd=2)


# PMM por pares
medias_aj <- emmeans(modelo_mixto, specs = "Tratamiento")
medias_aj

# Comparaciones múltiples
pairs(medias_aj, adjust = "tukey")



medias_df <- as.data.frame(summary(medias_aj))

# Barras con error
ggplot(medias_df, aes(x=Tratamiento, y=emmean, fill=Tratamiento)) +
  geom_bar(stat="identity", color="black") +
  geom_errorbar(aes(ymin=lower.CL, ymax=upper.CL), width=0.2) +
  labs(x="Tratamiento", y="Media ajustada de TCH", title="Medias ajustadas por tratamiento") +
  theme_minimal()

# Boxplot de datos originales
ggplot(datos, aes(x=Tratamiento, y=TCH, fill=Tratamiento)) +
  geom_boxplot() +
  labs(title="Boxplot de TCH por Tratamiento") +
  theme_minimal()



#--------------------------------------------------------------
########---Analisis para todas las variables de respuesta
paquetes <- c(
  "openxlsx", "fBasics", "psych", "modeest", "ggrepel", "GGally", 
  "mice", "corrplot", "readxl", "doebioresearch", "performance", "dplyr", 
  "ScottKnott", "agricolae", "car", "broom", "data.table", "emmeans", 
  "ggplot2", "tidyverse", "lattice", "nlme", "lme4", "lmerTest", "multcomp", 
  "rstatix", "ggpubr", "see", "MASS", "lsmeans", "scales", "lmtest", "multcompView", 
  "googlesheets4", "googledrive", "clipr", "FactoMineR", "factoextra", 
  "glmmTMB", "DHARMa", "MuMIn", "hnp", "effects", "sjstats", "ExpDes", "sf", "tmap", "terra",
  "RVAideMemoire", "RColorBrewer", "DiagrammeR", "missMDA")

# Verifica cuáles no están instalados
no_instalados <- paquetes[!(paquetes %in% installed.packages()[,"Package"])];no_instalados

# Instala los que faltan
if(length(no_instalados)) {
  install.packages(no_instalados)
} else {
  message("Todos los paquetes ya están instalados.")
}

# Carga todos los paquetes (opcional)
lapply(paquetes, library, character.only = TRUE)
#-----------------------------------------------------------------------------------------------
archivo <- file.choose() #Abrir el archivo Excel  
hojas <- excel_sheets(archivo); hojas
for (h in hojas) {
  cat("\n--- Hoja:", h, "---\n")
  datos_hoja <- read_excel(archivo, sheet = h, n_max = 10)  # solo primeras 5 filas
  print(datos_hoja)
}
datos <- read_excel(archivo, sheet = 1)


#------------------------------------------------------------------------------------------------
########################################--ANÁLISIS ESTADÍSTICO--##########################################
# Análisis exploratorio de datos

attach(datos)
str(datos)
head(datos)
tail(datos)
view(datos)
summary(datos)
colnames(datos)
sapply(datos, class) #Tipo de datos
variables_numericas <- datos[sapply(datos, is.numeric)]
round(basicStats(variables_numericas), 2) #Estadística descriptiva

######--EXPERIMENTOS SIMPLES--########################

#DCA:

#################Modelo: ANDEVA para cada variable---------------------------------------------------------------------------
ANDEVA<- aov(Nitrogeno ~ Tratamiento)
summary(ANDEVA)
tabla_ANDEVA<-tidy(ANDEVA)
print(ANDEVA)


###############--ANDEVA para todas las variables de respuesta----------------------------------------------------

tratamiento <- "Tratamiento"
as.factor(tratamiento)
respuestas <- c("TCH", "Brix", "Pol", "Pureza", "Jugo", "Fibra", "Humedad","Rendimiento")


for (var in respuestas) {
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  formula <- as.formula(paste0("`", var, "` ~ `", tratamiento, "`"))
  modelo <- aov(formula, data = datos)
  
  print(summary(modelo))
}

################################# Verificación de supuestos para todas las variables de respuesta---------------------------------

for (var in respuestas) {
  
  formula <- as.formula(paste0("`", var, "` ~ `", tratamiento, "`"))
  modelo <- aov(formula, data = datos)
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  cat("\n--- Verificación de supuestos ---\n")
  
  # 1. QQ-plot en pantalla
  qqPlot(modelo$residuals, main=paste("QQ-plot:", var), col="red", lwd=2, pch=16)
  
  # 2. Residuos vs Ajustados en pantalla
  plot(modelo$fitted.values, modelo$residuals, 
       main=paste("Residuos vs Ajustados:", var),
       xlab="Valores Ajustados", ylab="Residuos", pch=16, col="blue")
  abline(h=0, col="red", lwd=2)
  
  # Shapiro-Wilk
  if(length(unique(modelo$residuals)) > 1){
    SW <- shapiro.test(modelo$residuals)
    cat("\nShapiro-Wilk para", var, ":\n")
    print(SW)
  } else {
    cat("\nShapiro-Wilk no se puede calcular: todos los residuos son idénticos.\n")
  }
  
  # Bartlett y Levene
  if(length(unique(datos[[var]])) > 1){
    cat("\nPrueba de Bartlett para", var, ":\n")
    print(bartlett.test(formula, data=datos))
    
    cat("\nPrueba de Levene para", var, ":\n")
    print(leveneTest(formula, data=datos, center="median"))
  } else {
    cat("Bartlett y Levene no se pueden calcular: variable constante.\n")
  }
  
  cat("\n------------------------------------\n")
}

#########################----Prueba múltiple de medias para todas las variables de respuesta


for (var in respuestas) {
  
  # Crear un nombre seguro: prefijo "var_" + reemplazar caracteres especiales
  nombre_var <- paste0("var_", gsub("[^[:alnum:]_]", "_", var))
  
  # Ignorar nombres que queden vacíos o solo guiones
  if(grepl("^var_[_]*$", nombre_var)){
    cat("\nVariable", var, "omitida: nombre no válido para análisis.\n")
    next
  }
  
  # Crear dataframe temporal con nombre seguro
  datos_temp <- datos
  names(datos_temp)[names(datos_temp) == var] <- nombre_var
  
  # Crear modelo ANDEVA
  formula <- as.formula(paste0("`", nombre_var, "` ~ `", tratamiento, "`"))
  modelo <- aov(formula, data = datos_temp)
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  # -------------------------
  # Tukey HSD
  # -------------------------
  if(length(unique(datos_temp[[nombre_var]])) > 1){
    cat("\n--- Tukey HSD ---\n")
    HSD.test(modelo, tratamiento, console=TRUE)
  } else {
    cat("\nTukey HSD no se puede calcular: variable constante.\n")
  }
  
  # -------------------------
  # Scott-Knott
  # -------------------------
  if(length(unique(datos_temp[[nombre_var]])) > 1){
    cat("\n--- Scott-Knott ---\n")
    sk <- SK(modelo, which=tratamiento, dispersion="se", sig.level=0.05)
    print(summary(sk))
  } else {
    cat("\nScott-Knott no se puede calcular: variable constante o sin variación.\n")
  }
  
  cat("\n------------------------------------\n")
}


###############################################--Análisis gráfico--######################################

for (var in respuestas) {
  
  # Resumen con medias e IC95%
  resumen <- datos %>%
    group_by(.data[[tratamiento]]) %>%
    summarise(
      media = mean(.data[[var]], na.rm=TRUE),
      sd = sd(.data[[var]], na.rm=TRUE),
      n = n(),
      se = sd / sqrt(n),
      IC_inf = media - qt(0.975, df=n-1) * se,
      IC_sup = media + qt(0.975, df=n-1) * se,
      .groups="drop"
    )
  
  # Ordenar tratamientos por la media
  resumen <- resumen %>%
    arrange(media) %>%
    mutate(Trat_ordenado = factor(.data[[tratamiento]], levels = .data[[tratamiento]]))
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  # Paleta sobria
  colores <- "steelblue"
  
  # -------------------------
  # 1. Boxplot
  # -------------------------
  print(
    ggplot(datos, aes(x=.data[[tratamiento]], y=.data[[var]])) +
      geom_boxplot(fill="gray70", color="black") +
      labs(title=paste("Boxplot -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 2. Medias con vigotes (vertical)
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media)) +
      geom_point(size=3, color=colores) +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Medias con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 3. Gráfico de líneas
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media, group=1)) +
      geom_line(size=1, color=colores) +
      geom_point(size=3, color=colores) +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Líneas con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 4. Medias con vigotes horizontales
  # -------------------------
  print(
    ggplot(resumen, aes(y=Trat_ordenado, x=media)) +
      geom_point(size=3, color=colores) +
      geom_errorbarh(aes(xmin=IC_inf, xmax=IC_sup), height=0.2, color="black") +
      labs(title=paste("Medias con IC95% (horizontal) -", var), x=var, y=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 5. Barras con IC95% (ordenadas)
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media)) +
      geom_col(fill=colores, color="black") +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Barras con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
}

###################################################################################################################

#DBCA:


#################Modelo: ANDEVA para cada variable---------------------------------------------------------------------------
ANDEVA<- aov(TCH ~ Tratamiento + Replica)
summary(ANDEVA)

###############--ANDEVA para todas las variables de respuesta----------------------------------------------------
colnames(datos)
tratamiento <- "Tratamiento"
as.factor(tratamiento)
respuestas<- c("TCH", "Brix", "Pol", "Pureza", "Jugo", "Fibra", "Humedad","Rendimiento")  #Agregar las variables de respuesta de interés


for (var in respuestas) {
  formula <- as.formula(paste0("`", var, "` ~ Tratamiento + Replica"))
  modelo <- aov(formula, data = datos)
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  print(summary(modelo))
}


################################# Verificación de supuestos para todas las variables de respuesta---------------------------------

for (var in respuestas) {
  
  # La fórmula ahora incluye el efecto del bloque (Replica)
  formula <- as.formula(paste0("`", var, "` ~ `", tratamiento, "` + Replica"))
  modelo <- aov(formula, data = datos)
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  cat("\n--- Verificación de supuestos ---\n")
  
  # 1. QQ-plot en pantalla
  qqPlot(modelo$residuals, main=paste("QQ-plot:", var), col="red", lwd=2, pch=16)
  
  # 2. Residuos vs Ajustados en pantalla
  plot(modelo$fitted.values, modelo$residuals,
       main=paste("Residuos vs Ajustados:", var),
       xlab="Valores Ajustados", ylab="Residuos", pch=16, col="blue")
  abline(h=0, col="red", lwd=2)
  
  # Shapiro-Wilk
  if(length(unique(modelo$residuals)) > 1){
    SW <- shapiro.test(modelo$residuals)
    cat("\nShapiro-Wilk para", var, ":\n")
    print(SW)
  } else {
    cat("\nShapiro-Wilk no se puede calcular: todos los residuos son idénticos.\n")
  }
  
  # Bartlett y Levene
  if(length(unique(datos[[var]])) > 1){
    cat("\nPrueba de Bartlett para", var, ":\n")
    # Estas pruebas deben usar el modelo simplificado que evalúa la homogeneidad
    # de varianzas entre los grupos de tratamiento, no los bloques.
    print(bartlett.test(as.formula(paste0("`", var, "` ~ `", tratamiento, "`")), data=datos))
    
    cat("\nPrueba de Levene para", var, ":\n")
    print(leveneTest(as.formula(paste0("`", var, "` ~ `", tratamiento, "`")), data=datos, center="median"))
  } else {
    cat("Bartlett y Levene no se pueden calcular: variable constante.\n")
  }
  
  cat("\n------------------------------------\n")
}

#########################----Prueba múltiple de medias para todas las variables de respuesta


for (var in respuestas) {
  
  # Crear un nombre seguro: prefijo "var_" + reemplazar caracteres especiales
  nombre_var <- paste0("var_", gsub("[^[:alnum:]_]", "_", var))
  
  # Ignorar nombres que queden vacíos o solo guiones
  if(grepl("^var_[_]*$", nombre_var)){
    cat("\nVariable", var, "omitida: nombre no válido para análisis.\n")
    next
  }
  
  # Crear dataframe temporal con nombre seguro
  datos_temp <- datos
  names(datos_temp)[names(datos_temp) == var] <- nombre_var
  
  # Crear modelo ANDEVA, ahora con el efecto de Replica
  formula <- as.formula(paste0("`", nombre_var, "` ~ `", tratamiento, "` + Replica"))
  modelo <- aov(formula, data = datos_temp)
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  # -------------------------
  # Tukey HSD
  # -------------------------
  if(length(unique(datos_temp[[nombre_var]])) > 1){
    cat("\n--- Tukey HSD ---\n")
    HSD.test(modelo, tratamiento, console=TRUE)
  } else {
    cat("\nTukey HSD no se puede calcular: variable constante.\n")
  }
  
  # -------------------------
  # Scott-Knott
  # -------------------------
  if(length(unique(datos_temp[[nombre_var]])) > 1){
    cat("\n--- Scott-Knott ---\n")
    sk <- SK(modelo, which=tratamiento, dispersion="se", sig.level=0.05)
    print(summary(sk))
  } else {
    cat("\nScott-Knott no se puede calcular: variable constante o sin variación.\n")
  }
  
  cat("\n------------------------------------\n")
}


###############################################--Análisis gráfico--######################################

for (var in respuestas) {
  
  # Resumen con medias e IC95%
  resumen <- datos %>%
    group_by(.data[[tratamiento]]) %>%
    summarise(
      media = mean(.data[[var]], na.rm=TRUE),
      sd = sd(.data[[var]], na.rm=TRUE),
      n = n(),
      se = sd / sqrt(n),
      IC_inf = media - qt(0.975, df=n-1) * se,
      IC_sup = media + qt(0.975, df=n-1) * se,
      .groups="drop"
    )
  
  # Ordenar tratamientos por la media
  resumen <- resumen %>%
    arrange(media) %>%
    mutate(Trat_ordenado = factor(.data[[tratamiento]], levels = .data[[tratamiento]]))
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  # Paleta sobria
  colores <- "steelblue"
  
  # -------------------------
  # 1. Boxplot
  # -------------------------
  print(
    ggplot(datos, aes(x=.data[[tratamiento]], y=.data[[var]])) +
      geom_boxplot(fill="gray70", color="black") +
      labs(title=paste("Boxplot -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 2. Medias con vigotes (vertical)
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media)) +
      geom_point(size=3, color=colores) +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Medias con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 3. Gráfico de líneas
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media, group=1)) +
      geom_line(size=1, color=colores) +
      geom_point(size=3, color=colores) +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Líneas con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 4. Medias con vigotes horizontales
  # -------------------------
  print(
    ggplot(resumen, aes(y=Trat_ordenado, x=media)) +
      geom_point(size=3, color=colores) +
      geom_errorbarh(aes(xmin=IC_inf, xmax=IC_sup), height=0.2, color="black") +
      labs(title=paste("Medias con IC95% (horizontal) -", var), x=var, y=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 5. Barras con IC95% (ordenadas)
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media)) +
      geom_col(fill=colores, color="black") +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Barras con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
}

##############################################################################################################

# DCL
#------------------Modelo: ANDEVA para cada variable-------------------------------------

andeva<- aov(TCH ~ Tratamiento + fila + col)
anova(andeva)

#--------------------------ANDEVA para todas las variables--------------------------------------

tratamiento <- "Tratamiento"
respuestas <- c("TCH", "Brix", "Pol", "Pureza", "%_Jugo", "%_Fibra", "%_Humedad","Rendimiento")
filas <- "Fila" 
columnas <- "Columna" 


###############--ANDEVA para todas las variables de respuesta----------------------------------------------------
colnames(datos)

for (var in respuestas) {
  formula <- as.formula(paste0("`", var, "` ~ Tratamiento + `", filas, "` + `", columnas, "`"))
  modelo <- aov(formula, data = datos)
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  print(summary(modelo))
}

---
  
  ################################# Verificación de supuestos para todas las variables de respuesta---------------------------------

for (var in respuestas) {
  
  # La fórmula del modelo para supuestos también debe incluir ambas variables de bloqueo
  formula <- as.formula(paste0("`", var, "` ~ `", tratamiento, "` + `", filas, "` + `", columnas, "`"))
  modelo <- aov(formula, data = datos)
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  cat("\n--- Verificación de supuestos ---\n")
  
  # 1. QQ-plot en pantalla
  qqPlot(modelo$residuals, main=paste("QQ-plot:", var), col="red", lwd=2, pch=16)
  
  # 2. Residuos vs Ajustados en pantalla
  plot(modelo$fitted.values, modelo$residuals,
       main=paste("Residuos vs Ajustados:", var),
       xlab="Valores Ajustados", ylab="Residuos", pch=16, col="blue")
  abline(h=0, col="red", lwd=2)
  
  # Shapiro-Wilk
  if(length(unique(modelo$residuals)) > 1){
    SW <- shapiro.test(modelo$residuals)
    cat("\nShapiro-Wilk para", var, ":\n")
    print(SW)
  } else {
    cat("\nShapiro-Wilk no se puede calcular: todos los residuos son idénticos.\n")
  }
  
  # Bartlett y Levene
  if(length(unique(datos[[var]])) > 1){
    cat("\nPrueba de Bartlett para", var, ":\n")
    # Estas pruebas de homocedasticidad solo evalúan el efecto del tratamiento
    print(bartlett.test(as.formula(paste0("`", var, "` ~ `", tratamiento, "`")), data=datos))
    
    cat("\nPrueba de Levene para", var, ":\n")
    print(leveneTest(as.formula(paste0("`", var, "` ~ `", tratamiento, "`")), data=datos, center="median"))
  } else {
    cat("Bartlett y Levene no se pueden calcular: variable constante.\n")
  }
  
  cat("\n------------------------------------\n")
}

---
  
  #########################----Prueba múltiple de medias para todas las variables de respuesta
  
  for (var in respuestas) {
    
    # Crear un nombre seguro
    nombre_var <- paste0("var_", gsub("[^[:alnum:]_]", "_", var))
    
    # Ignorar nombres que queden vacíos
    if(grepl("^var_[_]*$", nombre_var)){
      cat("\nVariable", var, "omitida: nombre no válido para análisis.\n")
      next
    }
    
    # Crear dataframe temporal
    datos_temp <- datos
    names(datos_temp)[names(datos_temp) == var] <- nombre_var
    
    # La fórmula para las PMM también incluye ambas variables de bloqueo
    formula <- as.formula(paste0("`", nombre_var, "` ~ `", tratamiento, "` + `", filas, "` + `", columnas, "`"))
    modelo <- aov(formula, data = datos_temp)
    
    cat("\n====================================\n")
    cat("Variable:", var, "\n")
    cat("====================================\n")
    
    # -------------------------
    # Tukey HSD
    # -------------------------
    if(length(unique(datos_temp[[nombre_var]])) > 1){
      cat("\n--- Tukey HSD ---\n")
      HSD.test(modelo, tratamiento, console=TRUE)
    } else {
      cat("\nTukey HSD no se puede calcular: variable constante.\n")
    }
    
    # -------------------------
    # Scott-Knott
    # -------------------------
    if(length(unique(datos_temp[[nombre_var]])) > 1){
      cat("\n--- Scott-Knott ---\n")
      sk <- SK(modelo, which=tratamiento, dispersion="se", sig.level=0.05)
      print(summary(sk))
    } else {
      cat("\nScott-Knott no se puede calcular: variable constante o sin variación.\n")
    }
    
    cat("\n------------------------------------\n")
  }

---
  
  ###############################################--Análisis gráfico--######################################

for (var in respuestas) {
  # Resumen con medias e IC95%
  resumen <- datos %>%
    group_by(.data[[tratamiento]]) %>%
    summarise(
      media = mean(.data[[var]], na.rm=TRUE),
      sd = sd(.data[[var]], na.rm=TRUE),
      n = n(),
      se = sd / sqrt(n),
      IC_inf = media - qt(0.975, df=n-1) * se,
      IC_sup = media + qt(0.975, df=n-1) * se,
      .groups="drop"
    )
  
  # Ordenar tratamientos por la media
  resumen <- resumen %>%
    arrange(media) %>%
    mutate(Trat_ordenado = factor(.data[[tratamiento]], levels = .data[[tratamiento]]))
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  # Paleta sobria
  colores <- "steelblue"
  
  # -------------------------
  # 1. Boxplot
  # -------------------------
  print(
    ggplot(datos, aes(x=.data[[tratamiento]], y=.data[[var]])) +
      geom_boxplot(fill="gray70", color="black") +
      labs(title=paste("Boxplot -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 2. Medias con vigotes (vertical)
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media)) +
      geom_point(size=3, color=colores) +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Medias con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 3. Gráfico de líneas
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media, group=1)) +
      geom_line(size=1, color=colores) +
      geom_point(size=3, color=colores) +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Líneas con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 4. Medias con vigotes horizontales
  # -------------------------
  print(
    ggplot(resumen, aes(y=Trat_ordenado, x=media)) +
      geom_point(size=3, color=colores) +
      geom_errorbarh(aes(xmin=IC_inf, xmax=IC_sup), height=0.2, color="black") +
      labs(title=paste("Medias con IC95% (horizontal) -", var), x=var, y=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 5. Barras con IC95% (ordenadas)
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media)) +
      geom_col(fill=colores, color="black") +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Barras con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
}


#--------------------------------------------------------------------------------------------------------------
###############################--Experimentos factoriales (Arreglo factorial combinatorio)--##################################################################

# DCA:
#-------------------------Modelo: ANDEVA para una variable-------------------------------------------
colnames(datos)
FA<- as.factor(Vinaza)                   #Agregar los factores que sean necesarios
FB<- as.factor(N_kg)
VR<- as.vector(Rendimiento)
y<- as.numeric(VR)

andeva<- aov(y~FA*FB)
anova(andeva)





#----------------------ANDEVA para todas las variables---------------------------------
colnames(datos)

factores <- c("Vinaza", "N_kg")
for (f in factores) {
  datos[[f]] <- as.factor(datos[[f]])
}

respuestas <- c("TCH", "Brix", "Pol", "Pureza", "Jugo", "Fibra", "Humedad","Rendimiento")

for (var in respuestas) {
  # Construir la fórmula dinámica
  formula_anidada <- paste(factores, collapse = "*")
  formula <- as.formula(paste0("`", var, "` ~ ", formula_anidada))
  
  # Ajustar modelo ANDEVA
  modelo <- aov(formula, data = datos)
  
  cat("\n====================================\n")
  cat("ANDEVA para la variable:", var, "\n")
  cat("====================================\n")
  
  print(summary(modelo))
}

####################################### Verificación de supuestos para todas las variables de respuesta

for (var in respuestas) {
  # Modelo para supuestos con todas las interacciones
  formula_anidada <- paste(factores, collapse = "*")
  formula <- as.formula(paste0("`", var, "` ~ ", formula_anidada))
  modelo <- aov(formula, data = datos)
  
  cat("\n====================================\n")
  cat("Supuestos para la variable:", var, "\n")
  cat("====================================\n")
  
  cat("\n--- Verificación de supuestos ---\n")
  
  # 1. QQ-plot y Shapiro-Wilk para normalidad de los residuos
  qqPlot(modelo$residuals, main = paste("QQ-plot:", var), col = "red", lwd = 2, pch = 16)
  if (length(unique(modelo$residuals)) > 1) {
    SW <- shapiro.test(modelo$residuals)
    cat("\nShapiro-Wilk para", var, ":\n")
    print(SW)
  } else {
    cat("\nShapiro-Wilk no se puede calcular: todos los residuos son idénticos.\n")
  }
  
  # 2. Residuos vs Ajustados para homocedasticidad
  plot(modelo$fitted.values, modelo$residuals,
       main = paste("Residuos vs Ajustados:", var),
       xlab = "Valores Ajustados", ylab = "Residuos", pch = 16, col = "blue")
  abline(h = 0, col = "red", lwd = 2)
  
  # 3. Pruebas de homocedasticidad (Bartlett y Levene)
  cat("\nPrueba de Bartlett para", var, ":\n")
  # Para Bartlett y Levene, se usa una variable de interacción que agrupa todos los factores
  interaccion_completa <- paste(factores, collapse = ":")
  formula_interaccion <- as.formula(paste0("`", var, "` ~ ", "interaction(", interaccion_completa, ")"))
  
  if (length(unique(datos[[var]])) > 1) {
    tryCatch({
      print(bartlett.test(formula_interaccion, data = datos))
    }, error = function(e) {
      cat("Error al ejecutar bartlett.test:", e$message, "\n")
    })
    
    cat("\nPrueba de Levene para", var, ":\n")
    tryCatch({
      print(leveneTest(formula_interaccion, data = datos, center = "median"))
    }, error = function(e) {
      cat("Error al ejecutar leveneTest:", e$message, "\n")
    })
  } else {
    cat("Bartlett y Levene no se pueden calcular: variable constante.\n")
  }
}



###################--Prueba múltiple de medias para todas las variables de respuesta-################

# Aseguramos que los factores realmente sean factores
for (f in factores) {
  datos[[f]] <- as.factor(datos[[f]])
}

for (var in respuestas) {
  cat("\n====================================\n")
  cat("PMM para la variable:", var, "\n")
  cat("====================================\n")
  
  # ======================
  # Interacción completa
  # ======================
  datos$interaccion_completa <- interaction(datos[, factores], sep = "_")
  modelo_interaccion <- aov(as.formula(paste0("`", var, "` ~ interaccion_completa")), data = datos)
  
  if (length(unique(datos[[var]])) > 1) {
    cat("\n--- Tukey HSD para interacción completa ---\n")
    HSD.test(modelo_interaccion, "interaccion_completa", console = TRUE)
    
    cat("\n--- Scott-Knott para interacción completa ---\n")
    tryCatch({
      sk <- SK(modelo_interaccion, which = "interaccion_completa", dispersion = "se", sig.level = 0.05)
      print(summary(sk))
    }, error = function(e) {
      cat("⚠️ Error en Scott-Knott (interacción):", e$message, "\n")
    })
  } else {
    cat("Pruebas de medias no se pueden calcular: variable constante.\n")
  }
  
  # ======================
  # Factores individuales
  # ======================
  for (f in factores) {
    cat("\n--- Tukey HSD para factor:", f, "---\n")
    modelo_factor <- aov(as.formula(paste0("`", var, "` ~ ", f)), data = datos)
    HSD.test(modelo_factor, f, console = TRUE)
    
    cat("\n--- Scott-Knott para factor:", f, "---\n")
    tryCatch({
      sk_f <- SK(modelo_factor, which = f, dispersion = "se", sig.level = 0.05)
      print(summary(sk_f))
    }, error = function(e) {
      cat("⚠️ Error en Scott-Knott para", f, ":", e$message, "\n")
    })
  }
  
  # Eliminar columna temporal de interacción
  datos$interaccion_completa <- NULL
  
  cat("\n------------------------------------\n")
}


########### Análisis gráfico: Gráfico de interacciones--###################################

for (var in respuestas) {
  cat("\n====================================\n")
  cat("Gráficos para:", var, "\n")
  cat("====================================\n")
  
  # ---------------------------------------------
  # Factores individuales
  # ---------------------------------------------
  for (f in factores) {
    resumen_factor <- datos %>%
      group_by(.data[[f]]) %>%
      summarise(media = mean(.data[[var]], na.rm = TRUE),
                se = sd(.data[[var]], na.rm = TRUE)/sqrt(n()),
                .groups = "drop")
    
    # Barras con vigotes
    p_barra <- ggplot(resumen_factor, aes(x = .data[[f]], y = media)) +
      geom_bar(stat = "identity", fill = "gray70", color = "black") +
      geom_errorbar(aes(ymin = media - se, ymax = media + se), width = 0.2) +
      labs(title = paste("Barras -", f, "-", var), x = f, y = var) +
      theme_minimal()
    print(p_barra)
    
    # Puntos con vigotes
    p_punto <- ggplot(resumen_factor, aes(x = .data[[f]], y = media)) +
      geom_point(size = 3, color = "steelblue") +
      geom_errorbar(aes(ymin = media - se, ymax = media + se), width = 0.2) +
      labs(title = paste("Puntos -", f, "-", var), x = f, y = var) +
      theme_minimal()
    print(p_punto)
    
    # Boxplot individual
    p_box <- ggplot(datos, aes(x = .data[[f]], y = .data[[var]])) +
      geom_boxplot(fill="lightblue") +
      labs(title = paste("Boxplot -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p_box)
  }
  
  # ---------------------------------------------
  # Interacciones
  # ---------------------------------------------
  if(length(factores) > 1) {
    factor1 <- factores[1]
    factor2 <- factores[2]
    
    resumen_interaccion <- datos %>%
      group_by(.data[[factor1]], .data[[factor2]]) %>%
      summarise(media = mean(.data[[var]], na.rm=TRUE),
                se = sd(.data[[var]], na.rm=TRUE)/sqrt(n()),
                .groups="drop") %>%
      ungroup()
    
    resumen_interaccion <- resumen_interaccion %>%
      mutate(Interaccion = interaction(.data[[factor1]], .data[[factor2]]))
    
    # Línea de interacción limpia
    p_lineas <- ggplot(resumen_interaccion, aes(x=.data[[factor1]], y=media, group=.data[[factor2]], color=.data[[factor2]])) +
      geom_line(size=1.2) +
      geom_point(size=3) +
      labs(title=paste("Interacción líneas -", factor1, "x", factor2, "-", var),
           x=factor1, y=var, color=factor2) +
      theme_minimal()
    print(p_lineas)
    
    # Barras de interacción con vigotes
    p_barras <- ggplot(resumen_interaccion, aes(x=Interaccion, y=media)) +
      geom_bar(stat="identity", fill="lightcoral", color="black") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Barras de interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_barras)
    
    # Puntos de interacción (limpios)
    p_puntos <- ggplot(resumen_interaccion, aes(x=Interaccion, y=media)) +
      geom_point(size=3, color="firebrick") +
      labs(title=paste("Puntos de interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_puntos)
    
    # Boxplot de interacción
    p_box_inter <- ggplot(datos, aes(x=interaction(.data[[factor1]], .data[[factor2]]), y=.data[[var]])) +
      geom_boxplot(fill="lightgreen") +
      labs(title=paste("Boxplot de interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_box_inter)
  }
}

#---------------------------------------------------------------------------
# DBCA:
################################--ANDEVA para todas las variables de respuesta----------

factores <- c("Vinaza", "N_kg") 
for (f in factores) {
  datos[[f]] <- as.factor(datos[[f]])
}

respuestas <- c("TCH", "Brix", "Pol", "Pureza", "Jugo", "Fibra", "Humedad","Rendimiento")

for (var in respuestas) {
  formula_anidada <- paste(factores, collapse = "*")
  formula <- as.formula(paste0("`", var, "` ~ Replica + ", formula_anidada))  # bloque agregado
  
  modelo <- aov(formula, data = datos)
  
  cat("\n====================================\n")
  cat("ANDEVA para la variable:", var, "\n")
  cat("====================================\n")
  
  print(summary(modelo))
}


######################### Verificación de supuestos para todas las variables de respuesta

for (var in respuestas) {
  formula <- as.formula(paste0("`", var, "` ~ Replica + ", paste(factores, collapse = "*")))
  modelo <- aov(formula, data = datos)
  
  # QQ-plot y Shapiro-Wilk
  qqPlot(modelo$residuals, main = paste("QQ-plot:", var), col = "red", lwd = 2, pch = 16)
  if(length(unique(modelo$residuals)) > 1){
    SW <- shapiro.test(modelo$residuals)
    cat("\nShapiro-Wilk para", var, ":\n")
    print(SW)
  }
  
  # Residuos vs Ajustados
  plot(modelo$fitted.values, modelo$residuals,
       main=paste("Residuos vs Ajustados:", var),
       xlab="Valores Ajustados", ylab="Residuos", pch=16, col="blue")
  abline(h=0, col="red", lwd=2)
  
  # Bartlett y Levene usando interacción de factores de tratamiento
  formula_interaccion <- as.formula(paste0("`", var, "` ~ interaction(", paste(factores, collapse = ":"), ")"))
  
  if(length(unique(datos[[var]])) > 1){
    cat("\nPrueba de Bartlett para", var, ":\n")
    tryCatch({
      print(bartlett.test(formula_interaccion, data = datos))
    }, error = function(e){cat("Error Bartlett:", e$message, "\n")})
    
    cat("\nPrueba de Levene para", var, ":\n")
    tryCatch({
      print(leveneTest(formula_interaccion, data = datos, center="median"))
    }, error = function(e){cat("Error Levene:", e$message, "\n")})
  }
}
###########################--Prueba múltiple de medias (Tukey y Scott-Knott)------

# Convertir factores a factor
for (f in factores) {
  datos[[f]] <- as.factor(datos[[f]])
}


for (var in respuestas) {
  cat("\n====================================\n")
  cat("Pruebas de medias para la variable:", var, "\n")
  cat("====================================\n")
  
  # Interacción completa
  cat("\n--- Interacción completa ---\n")
  datos$interaccion_completa <- interaction(datos[, factores], sep = "_")
  modelo_interaccion <- aov(as.formula(paste0("`", var, "` ~ interaccion_completa")), data = datos)
  
  if(length(unique(datos[[var]])) > 1){
    cat("\nTukey HSD - Interacción completa:\n")
    HSD.test(modelo_interaccion, "interaccion_completa", console = TRUE)
    
    cat("\nScott-Knott - Interacción completa:\n")
    try({
      sk <- SK(modelo_interaccion, which="interaccion_completa", dispersion="se", sig.level=0.05)
      print(summary(sk))
    })
  } else {
    cat("Pruebas de medias no se pueden calcular: variable constante.\n")
  }
  
  # Factores individuales
  for (f in factores) {
    cat("\n--- Factor:", f, "---\n")
    modelo_factor <- aov(as.formula(paste0("`", var, "` ~ ", f)), data = datos)
    
    cat("\nTukey HSD - Factor", f, ":\n")
    HSD.test(modelo_factor, f, console = TRUE)
    
    cat("\nScott-Knott - Factor", f, ":\n")
    try({
      sk_f <- SK(modelo_factor, which=f, dispersion="se", sig.level=0.05)
      print(summary(sk_f))
    })
  }
  
  datos$interaccion_completa <- NULL
}


############################ Análisis gráfico
# ---------------------------------------------
for (var in respuestas) {
  cat("\n====================================\n")
  cat("Gráficos para:", var, "\n")
  cat("====================================\n")
  
  # Factores individuales
  for (f in factores) {
    resumen_factor <- datos %>%
      group_by(.data[[f]]) %>%
      summarise(media = mean(.data[[var]], na.rm = TRUE),
                se = sd(.data[[var]], na.rm = TRUE)/sqrt(n()),
                .groups = "drop")
    
    # Barras con vigotes
    p_barra <- ggplot(resumen_factor, aes(x = .data[[f]], y = media)) +
      geom_bar(stat="identity", fill="gray70", color="black") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Barras -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p_barra)
    
    # Puntos con vigotes
    p_punto <- ggplot(resumen_factor, aes(x = .data[[f]], y = media)) +
      geom_point(size=3, color="steelblue") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Puntos -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p_punto)
    
    # Boxplot
    p_box <- ggplot(datos, aes(x=.data[[f]], y=.data[[var]])) +
      geom_boxplot(fill="lightblue") +
      labs(title=paste("Boxplot -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p_box)
  }
  
  # Interacción
  if(length(factores) > 1) {
    factor1 <- factores[1]
    factor2 <- factores[2]
    
    resumen_interaccion <- datos %>%
      group_by(.data[[factor1]], .data[[factor2]]) %>%
      summarise(media = mean(.data[[var]], na.rm=TRUE),
                se = sd(.data[[var]], na.rm=TRUE)/sqrt(n()),
                .groups="drop") %>%
      ungroup() %>%
      mutate(Interaccion = interaction(.data[[factor1]], .data[[factor2]]))
    
    # Línea de interacción limpia
    p_lineas <- ggplot(resumen_interaccion, aes(x=.data[[factor1]], y=media, group=.data[[factor2]], color=.data[[factor2]])) +
      geom_line(size=1.2) +
      geom_point(size=3) +
      labs(title=paste("Interacción líneas -", factor1, "x", factor2, "-", var),
           x=factor1, y=var, color=factor2) +
      theme_minimal()
    print(p_lineas)
    
    # Barras de interacción con vigotes
    p_barras <- ggplot(resumen_interaccion, aes(x=Interaccion, y=media)) +
      geom_bar(stat="identity", fill="lightcoral", color="black") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Barras interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_barras)
    
    # Puntos de interacción con vigotes
    p_puntos <- ggplot(resumen_interaccion, aes(x=Interaccion, y=media)) +
      geom_point(size=3, color="firebrick") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Puntos interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_puntos)
    
    # Boxplot de interacción
    p_box_inter <- ggplot(datos, aes(x=interaction(.data[[factor1]], .data[[factor2]]), y=.data[[var]])) +
      geom_boxplot(fill="lightgreen") +
      labs(title=paste("Boxplot interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_box_inter)
  }
}


###############################--Experimento factorial con arreglo en parcelas divididas--#############################

# DCA:
#-------------------------Modelo: ANDEVA para una variable-------------------------------------------
colnames(datos)
FA<- as.factor(Vinaza)
FB<- as.factor(N_kg)
rep<- as.factor(Replica)
VR<- as.vector(TCH)
y<- as.numeric(VR)

andeva<- aov(y~FA+FB+Error(rep/FA)+FA:FB)
summary(andeva)
#----------------------ANDEVA para todas las variables---------------------------------

factores <- c("Vinaza", "N_kg")
rep <- "Replica"
respuestas <- c("TCH", "Brix", "Pol", "Pureza", "Jugo", "Fibra", "Humedad","Rendimiento")

for(f in c(factores, rep)) datos[[f]] <- as.factor(datos[[f]]) # Aseguramos que los factores y réplica sean factores


for(var in respuestas){
  cat("\n====================================\n")
  cat("ANDEVA para la variable:", var, "\n")
  cat("====================================\n")
  
  # Construir fórmula para parcelas divididas
  formula_anidada <- paste0("`", var, "` ~ ", factores[1], " + Error(", rep, "/", factores[1], ") + ",
                            factores[2], " + ", factores[1], ":", factores[2])
  
  modelo <- aov(as.formula(formula_anidada), data = datos)
  print(summary(modelo))
}

############################ Verificación de supuestos ############################
for(var in respuestas){
  
  # Modelo con único error (residual) para pruebas de supuestos
  formula_modelo <- paste0("`", var, "` ~ ", factores[1], "*", factores[2], " + ", rep, "/", factores[1])
  modelo <- aov(as.formula(formula_modelo), data = datos)
  
  cat("\n====================================\n")
  cat("Supuestos para la variable:", var, "\n")
  cat("====================================\n")
  
  # QQ-plot y Shapiro-Wilk
  qqPlot(modelo$residuals, main=paste("QQ-plot:", var), col="red", lwd=2, pch=16)
  if(length(unique(modelo$residuals))>1){
    cat("\nShapiro-Wilk:\n")
    print(shapiro.test(modelo$residuals))
  }
  
  # Residuos vs Ajustados
  plot(modelo$fitted.values, modelo$residuals, col="blue", pch=16,
       xlab="Valores Ajustados", ylab="Residuos",
       main=paste("Residuos vs Ajustados:", var))
  abline(h=0, col="red", lwd=2)
  
  # Homocedasticidad (Bartlett y Levene)
  formula_interaccion <- as.formula(paste0("`", var, "` ~ interaction(", factores[1], ",", factores[2], ")"))
  if(length(unique(datos[[var]]))>1){
    cat("\nBartlett test:\n")
    print(bartlett.test(formula_interaccion, data=datos))
    cat("\nLevene test (mediana):\n")
    print(leveneTest(formula_interaccion, data=datos, center="median"))
  }
}

############################ PMM para factores e interacción ############################
for(var in respuestas){
  cat("\n====================================\n")
  cat("PMM para la variable:", var, "\n")
  cat("====================================\n")
  
  # Interacción completa
  datos$interaccion_completa <- interaction(datos[, factores], sep="_")
  modelo_interaccion <- aov(as.formula(paste0("`", var, "` ~ interaccion_completa")), data=datos)
  
  if(length(unique(datos[[var]]))>1){
    cat("\n--- Tukey HSD para interacción ---\n")
    HSD.test(modelo_interaccion, "interaccion_completa", console=TRUE)
    
    cat("\n--- Scott-Knott para interacción ---\n")
    try({sk <- SK(modelo_interaccion, which="interaccion_completa", dispersion="se", sig.level=0.05); print(summary(sk))})
  }
  
  # Factores individuales
  for(f in factores){
    modelo_factor <- aov(as.formula(paste0("`", var, "` ~ ", f)), data=datos)
    
    cat("\n--- Tukey HSD para factor:", f, "---\n")
    HSD.test(modelo_factor, f, console=TRUE)
    
    cat("\n--- Scott-Knott para factor:", f, "---\n")
    try({sk_f <- SK(modelo_factor, which=f, dispersion="se", sig.level=0.05); print(summary(sk_f))})
  }
  
  datos$interaccion_completa <- NULL
}

############################ Gráficos ############################
for(var in respuestas){
  cat("\n====================================\n")
  cat("Gráficos para:", var, "\n")
  cat("====================================\n")
  
  # ---------------------------------------------
  # Factores individuales
  # ---------------------------------------------
  for(f in factores){
    resumen <- datos %>%
      group_by(.data[[f]]) %>%
      summarise(media=mean(.data[[var]], na.rm=TRUE),
                se=sd(.data[[var]], na.rm=TRUE)/sqrt(n()), 
                .groups="drop") %>%
      arrange(media) %>%
      mutate(factor_ordenado=factor(.data[[f]], levels=.data[[f]]))
    
    # Barras ascendentes con vigotes
    p1 <- ggplot(resumen, aes(x=factor_ordenado, y=media)) +
      geom_bar(stat="identity", fill="gray70", color="black") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Barras -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p1)
    
    # Puntos con vigotes de error
    p2 <- ggplot(resumen, aes(x=factor_ordenado, y=media)) +
      geom_point(size=3, color="steelblue") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Puntos con error -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p2)
    
    # Boxplot
    p_box <- ggplot(datos, aes(x=.data[[f]], y=.data[[var]])) +
      geom_boxplot(fill="lightblue") +
      labs(title=paste("Boxplot -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p_box)
  }
  
  # ---------------------------------------------
  # Interacción entre factores
  # ---------------------------------------------
  if(length(factores) > 1){
    factor1 <- factores[1]
    factor2 <- factores[2]
    
    # Resumen para línea de interacción (sin vigotes)
    resumen_linea <- datos %>%
      group_by(.data[[factor1]], .data[[factor2]]) %>%
      summarise(media=mean(.data[[var]], na.rm=TRUE), .groups="drop") %>%
      ungroup() %>%
      mutate(interaccion=interaction(.data[[factor1]], .data[[factor2]]))
    
    # Línea de interacción limpia
    p_line <- ggplot(resumen_linea, aes(x=.data[[factor1]], y=media, group=.data[[factor2]], color=.data[[factor2]])) +
      geom_line(size=1.2) +
      geom_point(size=3) +
      labs(title=paste("Interacción líneas -", factor1, "x", factor2, "-", var),
           x=factor1, y=var, color=factor2) +
      theme_minimal()
    print(p_line)
    
    # Resumen para barras y puntos con vigotes
    resumen_barras <- datos %>%
      group_by(.data[[factor1]], .data[[factor2]]) %>%
      summarise(media=mean(.data[[var]], na.rm=TRUE),
                se=sd(.data[[var]], na.rm=TRUE)/sqrt(n()), .groups="drop") %>%
      ungroup() %>%
      mutate(interaccion=interaction(.data[[factor1]], .data[[factor2]]))
    
    # Barras de interacción con vigotes
    p_bar <- ggplot(resumen_barras, aes(x=interaccion, y=media)) +
      geom_bar(stat="identity", fill="lightcoral", color="black") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Barras de interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_bar)
    
    # Puntos de interacción con vigotes
    p_point <- ggplot(resumen_barras, aes(x=interaccion, y=media)) +
      geom_point(size=3, color="firebrick") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Puntos de interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_point)
    
    # Boxplot de interacción
    p_box_inter <- ggplot(datos, aes(x=interaction(.data[[factor1]], .data[[factor2]]), y=.data[[var]])) +
      geom_boxplot(fill="lightgreen") +
      labs(title=paste("Boxplot interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_box_inter)
  }
}

####################################-----DBCA:-############
FA<- as.factor(Vinaza)
FB<- as.factor(N_kg)
bloq<- as.factor(Replica)
VR<- as.vector(TCH)
y<- as.numeric(VR)  

andeva<- aov(y~FA+FB+bloq+Error(bloq/FA)+FA*FB)
summary(andeva)
#----------------------ANDEVA para todas las variables---------------------------------

factores <- c("Vinaza", "N_kg")
bloq <- "Replica"
respuestas <- c("TCH", "Brix", "Pol", "Pureza", "Jugo", "Fibra", "Humedad","Rendimiento")

for(f in c(factores, bloq)){
  datos[[f]] <- as.factor(datos[[f]])
}

# ANDEVA
for(var in respuestas){
  cat("\n====================================\n")
  cat("ANDEVA para la variable:", var, "\n")
  cat("====================================\n")
  
  formula_anidada <- paste0("`", var, "` ~ ", factores[1], "+", factores[2], "+", bloq, "+",
                            factores[1], ":", factores[2], "+ Error(", bloq,"/",factores[1],")")
  
  modelo <- aov(as.formula(formula_anidada), data = datos)
  print(summary(modelo))
}

# Verificación de supuestos
for(var in respuestas){
  formula_modelo <- paste0("`", var, "` ~ ", factores[1], "*", factores[2], "+", bloq, "/", factores[1])
  modelo <- aov(as.formula(formula_modelo), data = datos)
  
  cat("\n====================================\n")
  cat("Supuestos para la variable:", var, "\n")
  cat("====================================\n")
  
  qqPlot(modelo$residuals, main=paste("QQ-plot:", var), col="red", lwd=2, pch=16)
  if(length(unique(modelo$residuals))>1){
    cat("\nShapiro-Wilk:\n")
    print(shapiro.test(modelo$residuals))
  }
  
  plot(modelo$fitted.values, modelo$residuals, col="blue", pch=16,
       xlab="Valores Ajustados", ylab="Residuos",
       main=paste("Residuos vs Ajustados:", var))
  abline(h=0, col="red", lwd=2)
  
  formula_interaccion <- as.formula(paste0("`", var, "` ~ interaction(", factores[1], ",", factores[2], ")"))
  if(length(unique(datos[[var]]))>1){
    cat("\nBartlett test:\n")
    print(bartlett.test(formula_interaccion, data=datos))
    cat("\nLevene test (mediana):\n")
    print(leveneTest(formula_interaccion, data=datos, center="median"))
  }
}

####################---------- PMM------------------------

for(var in respuestas){
  cat("\n====================================\n")
  cat("PMM para la variable:", var, "\n")
  cat("====================================\n")
  
  # Interacción completa
  datos$interaccion_completa <- interaction(datos[, factores], sep="_")
  modelo_interaccion <- aov(as.formula(paste0("`", var, "` ~ interaccion_completa")), data=datos)
  
  if(length(unique(datos[[var]]))>1){
    cat("\n--- Tukey HSD para interacción ---\n")
    HSD.test(modelo_interaccion, "interaccion_completa", console=TRUE)
    
    cat("\n--- Scott-Knott para interacción ---\n")
    try({sk <- SK(modelo_interaccion, which="interaccion_completa", dispersion="se", sig.level=0.05); print(summary(sk))})
  }
  
  # Factores individuales
  for(f in factores){
    modelo_factor <- aov(as.formula(paste0("`", var, "` ~ ", f)), data=datos)
    
    cat("\n--- Tukey HSD para factor:", f, "---\n")
    HSD.test(modelo_factor, f, console=TRUE)
    
    cat("\n--- Scott-Knott para factor:", f, "---\n")
    try({sk_f <- SK(modelo_factor, which=f, dispersion="se", sig.level=0.05); print(summary(sk_f))})
  }
  
  datos$interaccion_completa <- NULL
}

# Gráficos
for(var in respuestas){
  cat("\n====================================\n")
  cat("Gráficos para:", var, "\n")
  cat("====================================\n")
  
  # Factores individuales
  for(f in factores){
    resumen <- datos %>%
      group_by(.data[[f]]) %>%
      summarise(media=mean(.data[[var]], na.rm=TRUE),
                se=sd(.data[[var]], na.rm=TRUE)/sqrt(n()), 
                .groups="drop")
    
    # Barras con error
    p_bar <- ggplot(resumen, aes(x=.data[[f]], y=media)) +
      geom_bar(stat="identity", fill="gray70", color="black") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Barras -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p_bar)
    
    # Puntos con error
    p_point <- ggplot(resumen, aes(x=.data[[f]], y=media)) +
      geom_point(size=3, color="steelblue") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Puntos -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p_point)
    
    # Boxplot
    p_box <- ggplot(datos, aes(x=.data[[f]], y=.data[[var]])) +
      geom_boxplot(fill="lightblue") +
      labs(title=paste("Boxplot -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p_box)
  }
  
  # Interacción 
  if(length(factores)>1){
    factor1 <- factores[1]
    factor2 <- factores[2]
    
    resumen_linea <- datos %>%
      group_by(.data[[factor1]], .data[[factor2]]) %>%
      summarise(media=mean(.data[[var]], na.rm=TRUE), .groups="drop")
    
    # Línea de interacción
    p_line <- ggplot(resumen_linea, aes(x=.data[[factor1]], y=media, group=.data[[factor2]], color=.data[[factor2]])) +
      geom_line(size=1.2) +
      geom_point(size=3) +
      labs(title=paste("Interacción líneas -", factor1, "x", factor2, "-", var),
           x=factor1, y=var, color=factor2) +
      theme_minimal()
    print(p_line)
    
    # Barras de interacción
    resumen_barras <- datos %>%
      group_by(.data[[factor1]], .data[[factor2]]) %>%
      summarise(media=mean(.data[[var]], na.rm=TRUE),
                se=sd(.data[[var]], na.rm=TRUE)/sqrt(n()), .groups="drop") %>%
      ungroup() %>%
      mutate(interaccion=interaction(.data[[factor1]], .data[[factor2]]))
    
    p_bar_int <- ggplot(resumen_barras, aes(x=interaccion, y=media)) +
      geom_bar(stat="identity", fill="lightcoral", color="black") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Barras interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_bar_int)
    
    # Puntos de interacción
    p_point_int <- ggplot(resumen_barras, aes(x=interaccion, y=media)) +
      geom_point(size=3, color="firebrick") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Puntos interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_point_int)
    
    # Boxplot interacción
    p_box_int <- ggplot(datos, aes(x=interaction(.data[[factor1]], .data[[factor2]]), y=.data[[var]])) +
      geom_boxplot(fill="lightgreen") +
      labs(title=paste("Boxplot interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_box_int)
  }
}


##############################################################################################################
### Análisis de componentes principales (PCA)

library(FactoMineR)
library(factoextra)
library(missMDA)

# Seleccionamos solo las variables cuantitativas
variables <- datos[, respuestas]

# Imputamos los NA usando PCA (elige ncp = número de componentes a estimar, ej: 2)
imput <- imputePCA(variables, ncp = 2)  

# Extraemos los datos imputados
variables_imputadas <- imput$completeObs

# Ejecutamos PCA con las variables imputadas
pca <- PCA(variables_imputadas, scale.unit = TRUE, graph = FALSE)

# -------------------------------
# Gráfico de individuos
# -------------------------------
fviz_pca_ind(pca, 
             geom.ind = "point",
             col.ind = datos$Tratamiento,   # variable categórica para colorear
             palette = "jco",
             addEllipses = TRUE,
             legend.title = "Grupo")

# -------------------------------
# Biplot (individuos + variables)
# -------------------------------
fviz_pca_biplot(pca, 
                col.ind = datos$Tratamiento,
                palette = "jco",
                addEllipses = TRUE,
                label = "var",
                col.var = "black")

# -------------------------------
# Biplot
# -------------------------------
fviz_pca_var(pca,
             col.var = "contrib",      # colorea según contribución al eje
             gradient.cols = c("blue", "blue", "red"),
             repel = TRUE)             # evita que se sobrepongan etiquetas

#####################################################################################################
## Análisis de covarianza (ANCOVA)

# Aseguramos que el factor sea factor y la covariable numérica
datos$Tratamiento <- as.factor(datos$Tratamiento)
datos$N_kg <- as.numeric(datos$Jugo, datos$Humedad)

# Variable de respuesta
vr <- "TCH"

# ---------------- ANCOVA ----------------
ancova <- aov(as.formula(paste0(vr, " ~ Tratamiento + Jugo + Humedad")), data = datos)
summary(ancova)

# Comparación de modelos para homogeneidad de pendientes
ancova_int <- aov(as.formula(paste0(vr, " ~ Vinaza * N_kg")), data = datos)
anova(ancova, ancova_int)  # verificar si interacción significativa

# ---------------- Supuestos ----------------

# Normalidad
shapiro.test(ancova$residuals)
qqPlot(ancova$residuals, col="red", pch=16)

# Homocedasticidad
leveneTest(as.formula(paste0(vr, " ~ Vinaza")), data=datos, center="mean")

# Independencia
dwtest(ancova)

# Residuos vs valores ajustados
plot(ancova$fitted.values, ancova$residuals, col="blue", pch=16,
     xlab="Valores ajustados", ylab="Residuos", main="Residuos vs Ajustados")
abline(h=0, col="red", lwd=2)

# ---------------- PMM / Medias ajustadas ----------------
medias_ajustadas <- emmeans(ancova, ~ Tratamiento)
print(medias_ajustadas)

# Comparaciones Tukey
tukey <- pairs(medias_ajustadas, adjust="tukey")
summary(tukey)

# Scott-Knott
sk <- SK(ancova, which="Tratamiento", dispersion="se", sig.level=0.05)
summary(sk)

# ---------------- Gráficos ----------------

# Barras con medias ajustadas y vigotes
medias_df <- as.data.frame(summary(medias_ajustadas))
ggplot(medias_df, aes(x=Tratamiento, y=emmean, fill=Tratamiento)) +
  geom_bar(stat="identity", color="black") +
  geom_errorbar(aes(ymin=lower.CL, ymax=upper.CL), width=0.2) +
  labs(x="Tratamiento", y=paste("Media ajustada de", vr),
       title=paste("Medias ajustadas de", vr, "por Tratamiento")) +
  theme_minimal()

# Boxplot de la variable de respuesta por factor
ggplot(datos, aes(x=Tratamiento, y=.data[[vr]], fill=Tratamiento)) +
  geom_boxplot() +
  labs(title=paste("Boxplot de", vr, "por Vinaza"), x="Vinaza", y=vr) +
  theme_minimal()




################################################################################################

##--Modelo lineal mixto (MLM)-------------------------------------------

modelo_mixto <- lmer(TCH ~ Tratamiento + (1 | Replica), data = datos, REML = TRUE)
summary(modelo_mixto)
anova(modelo_mixto)
print(modelo_mixto)
anova(modelo_mixto)

# Verificación de supuestos
res <- resid(modelo_mixto)
shapiro.test(res)

# QQ-plot
qqPlot(res, col="red", pch=16, main="QQ-Plot de residuos")
leveneTest(res ~ Tratamiento, data = datos, center = "mean")

fit <- fitted(modelo_mixto)
dwtest(lm(res ~ fit))

plot(fit, res, col="blue", pch=16,
     xlab="Valores ajustados", ylab="Residuos",
     main="Residuos vs Ajustados")
abline(h=0, col="red", lwd=2)


# PMM por pares
medias_aj <- emmeans(modelo_mixto, specs = "Tratamiento")
medias_aj

# Comparaciones múltiples
pairs(medias_aj, adjust = "tukey")



medias_df <- as.data.frame(summary(medias_aj))

# Barras con error
ggplot(medias_df, aes(x=Tratamiento, y=emmean, fill=Tratamiento)) +
  geom_bar(stat="identity", color="black") +
  geom_errorbar(aes(ymin=lower.CL, ymax=upper.CL), width=0.2) +
  labs(x="Tratamiento", y="Media ajustada de TCH", title="Medias ajustadas por tratamiento") +
  theme_minimal()

# Boxplot de datos originales
ggplot(datos, aes(x=Tratamiento, y=TCH, fill=Tratamiento)) +
  geom_boxplot() +
  labs(title="Boxplot de TCH por Tratamiento") +
  theme_minimal()


#--------------------------------------------------------------
########---Analisis para todas las variables de respuesta

respuestas <- "TCH"

efectos_fijos <- c("Tratamiento", "Replica") #Cambiar manualmente

efectos_aleatorios<- c("(1 | Poblacion)") #Cambiar manualmente

# Convertir factores (opcional, según tus columnas)
factores <- c("Tratamiento", "Replica", "Poblacion")
for(f in factores){
  if(f %in% colnames(datos)) datos[[f]] <- factor(datos[[f]])
}

# Bucle
for(var in respuestas){
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  # Construir la fórmula completa automáticamente
  fixed_str <- paste(efectos_fijos, collapse = " + ")
  random_str <- paste(efectos_aleatorios, collapse = " + ")
  
  formula <- as.formula(paste0(var, " ~ ", fixed_str, " + ", random_str))
  
  # Ajustar modelo
  modelo <- lmer(formula, data = datos, REML = TRUE)
  
  # Imprimir resultados
  print(summary(modelo))
  print(anova(modelo))
}

#-----------------------------Supuestos--------------------------------
# -----------------------
# DHARMa: residuos simulados
# -----------------------
sim_res <- simulateResiduals(modelo)
plot(sim_res)
cat("\nShapiro-Wilk de residuos (simulados):\n")
print(shapiro.test(residuals(sim_res)))

# -----------------------
# Residuos vs ajustados
# -----------------------
fitted_vals <- fitted(modelo)
resids <- resid(modelo)

p1 <- ggplot(data.frame(Fitted=fitted_vals, Resid=resids), aes(x=Fitted, y=Resid)) +
  geom_point() + geom_hline(yintercept=0, linetype="dashed", color="red") +
  labs(title=paste("Residuos vs Ajustados:", var))
print(p1)

# Residuos vs orden
p2 <- ggplot(data.frame(Order=1:length(resids), Resid=resids), aes(x=Order, y=Resid)) +
  geom_point() + geom_hline(yintercept=0, linetype="dashed", color="red") +
  labs(title=paste("Residuos vs Orden:", var))
print(p2)

cat("\nACF de residuos:\n")
print(acf(resids, plot=TRUE))

#--------------------------------------------PMM (Tukey)------------------------------------------
# Tukey por pares:

cat("\n=== Tukey HSD para efectos fijos ===\n")
for(var in respuestas){
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  formula <- as.formula(paste0(var, " ~ ", paste(efectos_fijos, collapse = " + "), " + ", paste(efectos_aleatorios, collapse = " + ")))
  modelo <- lmer(formula, data = datos, REML = TRUE)
  
  # Tukey HSD con glht
  tukey <- glht(modelo, linfct = mcp(Tratamiento = "Tukey"))
  print(summary(tukey))
}


# Bucle para letras de Tukey clásico (agrupamiento)
for(var in respuestas){
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  # Ajustar modelo lineal mixto
  formula <- as.formula(paste0(var, " ~ ", paste(efectos_fijos, collapse = " + "), " + ", paste(efectos_aleatorios, collapse = " + ")))
  modelo <- lmer(formula, data = datos, REML = TRUE)
  
  # Obtener medias estimadas
  emmeans_var <- emmeans(modelo, ~ Tratamiento)
  
  # Agrupar con letras
  letras <- cld(emmeans_var, Letters = letters, adjust = "tukey")
  
  print(letras)
  
  # Opcional: gráfico con letras
  resumen <- as.data.frame(letras)
  ggplot(resumen, aes(x=Tratamiento, y=emmean, fill=Tratamiento)) +
    geom_bar(stat="identity") +
    geom_text(aes(label=.group, y=emmean + 0.05*max(emmean)), vjust=0) +
    labs(title=paste("Agrupamiento Tukey con letras:", var), y="Media ajustada") +
    theme_minimal() -> p
  print(p)
}


# Ordenar de mayor a menor media y alfabéticamente
resumen <- resumen[order(-resumen$emmean, resumen$Tratamiento), ]

# Asignar letras manualmente
letras_vec <- letters[1:nrow(resumen)]
resumen$.group <- toupper(letras_vec)  # A, B, C...

print(resumen)

# Gráfico opcional con letras
ggplot(resumen, aes(x=reorder(Tratamiento, -emmean), y=emmean, fill=Tratamiento)) +
  geom_bar(stat="identity") +
  geom_text(aes(label=.group, y=emmean + 0.05*max(emmean)), vjust=0) +
  labs(title=paste("Agrupamiento Tukey con letras:", var), y="Media ajustada") +
  theme_minimal() -> p
print(p)}


#------------------Gráficos--------------------------------------------------
# Barras
for(var in respuestas){
  ggplot(datos, aes(x=Tratamiento, y=.data[[var]], fill=Tratamiento)) +
    geom_bar(stat="summary", fun="mean") +
    labs(title=paste("Gráfico de barras:", var), y=var) +
    theme_minimal() -> p
  print(p)
}

# Barras de error
for(var in respuestas){
  resumen <- datos %>%
    group_by(Tratamiento) %>%
    summarise(Media=mean(.data[[var]], na.rm=TRUE),
              SD=sd(.data[[var]], na.rm=TRUE))
  
  ggplot(resumen, aes(x=Tratamiento, y=Media, fill=Tratamiento)) +
    geom_bar(stat="identity") +
    geom_errorbar(aes(ymin=Media-SD, ymax=Media+SD), width=0.2) +
    geom_point(aes(y=Media), color="black", size=3) +
    coord_flip() +  # Acostado
    labs(title=paste("Gráfico de barras con error:", var), y=var) +
    theme_minimal() -> p
  print(p)
}


# Barras de error simples:
for(var in respuestas){
  resumen <- datos %>%
    group_by(Tratamiento) %>%
    summarise(Media = mean(.data[[var]], na.rm=TRUE),
              SD = sd(.data[[var]], na.rm=TRUE))
  
  ggplot(resumen, aes(x=Tratamiento, y=Media)) +
    geom_errorbar(aes(ymin=Media-SD, ymax=Media+SD), width=0.4) +  # vigotes
    geom_point(color="black", size=3) +  # punto central
    coord_flip() +  # acostado
    labs(title=paste("Medias con vigotes:", var), y=var) +
    theme_minimal() -> p
  print(p)
}


#Histograma
for(var in respuestas){
  ggplot(datos, aes(x=.data[[var]])) +
    geom_histogram(binwidth=diff(range(datos[[var]], na.rm=TRUE))/20,
                   fill="steelblue", color="black", alpha=0.7) +
    labs(title=paste("Histograma:", var), x=var, y="Frecuencia") +
    theme_minimal() -> p
  print(p)
}

###################################################################################################
###################-----MLG y MLGM

# Distribución Gaussiana (normal)
modelo_gauss <- lmer(TCH ~ Tratamiento + (1|Replica), data=datos)

# Poisson
modelo_pois <- glmer(TCH ~ Tratamiento + (1|Replica), data=datos, family=poisson)

# Quasi-Poisson
modelo_qpois <- glmmTMB(TCH ~ Tratamiento + (1|Replica), data=datos, family=poisson, dispformula = ~1)

# Negativa Binomial
modelo_nb <- glmmTMB(TCH ~ Tratamiento + (1|Replica), data=datos, family=nbinom2)

# Binomial (cuando y es proporción)
modelo_binom <- glmer(cbind(success, fail) ~ Tratamiento + (1|Replica), data=datos, family=binomial)

# Quasi-Binomial
modelo_qbin <- glmmTMB(cbind(success, fail) ~ Tratamiento + (1|Replica), data=datos, family=binomial, dispformula = ~1)


# Verificación de supuestos:

# Simulación de residuos
resid_sim <- simulateResiduals(fittedModel = modelo_pois, n = 1000)

# Graficar residuos
plot(resid_sim)

# Pruebas estadísticas de los residuos
testResiduals(resid_sim)       # uniformidad, outliers, dispersión
testDispersion(resid_sim)      # overdispersion
testUniformity(resid_sim)



library(emmeans)

# Medias ajustadas (en escala de link log para Poisson)
medias_aj <- emmeans(modelo_pois, ~ Tratamiento)
print(medias_aj)

# Comparaciones múltiples (Tukey)
pairs(medias_aj, adjust="tukey")


# Gráficos:
medias_aj <- emmeans(modelo_mixto, specs = tratamiento)
medias_ci <- as.data.frame(confint(medias_aj))  # Esto crea columnas lower.CL y upper.CL
ggplot(medias_ci, aes_string(x=tratamiento, y="emmean", fill=tratamiento)) +
  geom_bar(stat="identity", color="black") +
  geom_errorbar(aes(ymin=lower.CL, ymax=upper.CL), width=0.2) +
  labs(x=tratamiento, y=paste("Media ajustada de", vr),
       title=paste("Medias ajustadas -", vr)) +
  theme_minimal()
