# Lista de paquetes requeridos
paquetes <- c(
  "openxlsx", "fBasics", "psych", "modeest", "ggrepel", "GGally", 
  "mice", "corrplot", "readxl", "doebioresearch", "performance", "dplyr", 
  "ScottKnott", "agricolae", "car", "broom", "data.table", "emmeans", 
  "ggplot2", "tidyverse", "lattice", "nlme", "lme4", "lmerTest", "multcomp", 
  "rstatix", "ggpubr", "see", "MASS", "lsmeans", "scales", "lmtest", "multcompView", 
  "googlesheets4", "googledrive", "clipr", "FactoMineR", "factoextra", 
  "glmmTMB", "DHARMa", "MuMIn", "hnp", "effects", "sjstats", "ExpDes", "sf", "tmap", "terra",
  "RVAideMemoire", "RColorBrewer", "DiagrammeR")

# Verifica cuáles no están instalados
no_instalados <- paquetes[!(paquetes %in% installed.packages()[,"Package"])];no_instalados

# Instala los que faltan
if(length(no_instalados)) {
  install.packages(no_instalados)
} else {
  message("Todos los paquetes ya están instalados.")
}

# Carga todos los paquetes (opcional)
lapply(paquetes, library, character.only = TRUE)

archivo <- file.choose() #Abrir el archivo Excel  
hojas <- excel_sheets(archivo); hojas
for (h in hojas) {
  cat("\n--- Hoja:", h, "---\n")
  datos_hoja <- read_excel(archivo, sheet = h, n_max = 10)  # solo primeras 5 filas
  print(datos_hoja)
}
datos <- read_excel(archivo, sheet = 9)


#------------------------------------------------------------------------------------------------
########################################--ANÁLISIS ESTADÍSTICO--##########################################
# Análisis exploratorio de datos

attach(datos)
str(datos)
head(datos)
tail(datos)
view(datos)
summary(datos)
colnames(datos)
sapply(datos, class) #Tipo de datos
variables_numericas <- datos[sapply(datos, is.numeric)]
round(basicStats(variables_numericas), 2) #Estadística descriptiva

######--EXPERIMENTOS SIMPLES--########################

#DCA:

#################Modelo: ANDEVA para cada variable---------------------------------------------------------------------------
ANDEVA<- aov(Nitrogeno ~ Tratamiento)
summary(ANDEVA)
tabla_ANDEVA<-tidy(ANDEVA)
print(ANDEVA)


###############--ANDEVA para todas las variables de respuesta----------------------------------------------------

tratamiento <- "Tratamiento"
as.factor(tratamiento)
respuestas <- c("TCH", "Brix", "Pol", "Pureza", "%_Jugo", "%_Fibra", "%_Humedad","Rendimiento")


for (var in respuestas) {
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  formula <- as.formula(paste0("`", var, "` ~ `", tratamiento, "`"))
  modelo <- aov(formula, data = datos)
  
  print(summary(modelo))
}

################################# Verificación de supuestos para todas las variables de respuesta---------------------------------

for (var in respuestas) {
  
  formula <- as.formula(paste0("`", var, "` ~ `", tratamiento, "`"))
  modelo <- aov(formula, data = datos)
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  cat("\n--- Verificación de supuestos ---\n")
  
  # 1. QQ-plot en pantalla
  qqPlot(modelo$residuals, main=paste("QQ-plot:", var), col="red", lwd=2, pch=16)
  
  # 2. Residuos vs Ajustados en pantalla
  plot(modelo$fitted.values, modelo$residuals, 
       main=paste("Residuos vs Ajustados:", var),
       xlab="Valores Ajustados", ylab="Residuos", pch=16, col="blue")
  abline(h=0, col="red", lwd=2)
  
  # Shapiro-Wilk
  if(length(unique(modelo$residuals)) > 1){
    SW <- shapiro.test(modelo$residuals)
    cat("\nShapiro-Wilk para", var, ":\n")
    print(SW)
  } else {
    cat("\nShapiro-Wilk no se puede calcular: todos los residuos son idénticos.\n")
  }
  
  # Bartlett y Levene
  if(length(unique(datos[[var]])) > 1){
    cat("\nPrueba de Bartlett para", var, ":\n")
    print(bartlett.test(formula, data=datos))
    
    cat("\nPrueba de Levene para", var, ":\n")
    print(leveneTest(formula, data=datos, center="median"))
  } else {
    cat("Bartlett y Levene no se pueden calcular: variable constante.\n")
  }
  
  cat("\n------------------------------------\n")
}

#########################----Prueba múltiple de medias para todas las variables de respuesta


for (var in respuestas) {
  
  # Crear un nombre seguro: prefijo "var_" + reemplazar caracteres especiales
  nombre_var <- paste0("var_", gsub("[^[:alnum:]_]", "_", var))
  
  # Ignorar nombres que queden vacíos o solo guiones
  if(grepl("^var_[_]*$", nombre_var)){
    cat("\nVariable", var, "omitida: nombre no válido para análisis.\n")
    next
  }
  
  # Crear dataframe temporal con nombre seguro
  datos_temp <- datos
  names(datos_temp)[names(datos_temp) == var] <- nombre_var
  
  # Crear modelo ANDEVA
  formula <- as.formula(paste0("`", nombre_var, "` ~ `", tratamiento, "`"))
  modelo <- aov(formula, data = datos_temp)
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  # -------------------------
  # Tukey HSD
  # -------------------------
  if(length(unique(datos_temp[[nombre_var]])) > 1){
    cat("\n--- Tukey HSD ---\n")
    HSD.test(modelo, tratamiento, console=TRUE)
  } else {
    cat("\nTukey HSD no se puede calcular: variable constante.\n")
  }
  
  # -------------------------
  # Scott-Knott
  # -------------------------
  if(length(unique(datos_temp[[nombre_var]])) > 1){
    cat("\n--- Scott-Knott ---\n")
    sk <- SK(modelo, which=tratamiento, dispersion="se", sig.level=0.05)
    print(summary(sk))
  } else {
    cat("\nScott-Knott no se puede calcular: variable constante o sin variación.\n")
  }
  
  cat("\n------------------------------------\n")
}


###############################################--Análisis gráfico--######################################

for (var in respuestas) {
  
  # Resumen con medias e IC95%
  resumen <- datos %>%
    group_by(.data[[tratamiento]]) %>%
    summarise(
      media = mean(.data[[var]], na.rm=TRUE),
      sd = sd(.data[[var]], na.rm=TRUE),
      n = n(),
      se = sd / sqrt(n),
      IC_inf = media - qt(0.975, df=n-1) * se,
      IC_sup = media + qt(0.975, df=n-1) * se,
      .groups="drop"
    )
  
  # Ordenar tratamientos por la media
  resumen <- resumen %>%
    arrange(media) %>%
    mutate(Trat_ordenado = factor(.data[[tratamiento]], levels = .data[[tratamiento]]))
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  # Paleta sobria
  colores <- "steelblue"
  
  # -------------------------
  # 1. Boxplot
  # -------------------------
  print(
    ggplot(datos, aes(x=.data[[tratamiento]], y=.data[[var]])) +
      geom_boxplot(fill="gray70", color="black") +
      labs(title=paste("Boxplot -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 2. Medias con vigotes (vertical)
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media)) +
      geom_point(size=3, color=colores) +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Medias con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 3. Gráfico de líneas
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media, group=1)) +
      geom_line(size=1, color=colores) +
      geom_point(size=3, color=colores) +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Líneas con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 4. Medias con vigotes horizontales
  # -------------------------
  print(
    ggplot(resumen, aes(y=Trat_ordenado, x=media)) +
      geom_point(size=3, color=colores) +
      geom_errorbarh(aes(xmin=IC_inf, xmax=IC_sup), height=0.2, color="black") +
      labs(title=paste("Medias con IC95% (horizontal) -", var), x=var, y=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 5. Barras con IC95% (ordenadas)
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media)) +
      geom_col(fill=colores, color="black") +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Barras con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
}

###################################################################################################################

#DBCA:


#################Modelo: ANDEVA para cada variable---------------------------------------------------------------------------
ANDEVA<- aov(TCH ~ Tratamiento + Replica)
summary(ANDEVA)

###############--ANDEVA para todas las variables de respuesta----------------------------------------------------
colnames(datos)
tratamiento <- "Tratamiento"
as.factor(tratamiento)
respuestas<- c("TCH", "Brix", "Pol", "Pureza", "%_Jugo", "%_Fibra", "%_Humedad","Rendimiento")  #Agregar las variables de respuesta de interés


for (var in respuestas) {
  formula <- as.formula(paste0("`", var, "` ~ Tratamiento + Replica"))
  modelo <- aov(formula, data = datos)
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  print(summary(modelo))
}


################################# Verificación de supuestos para todas las variables de respuesta---------------------------------

for (var in respuestas) {
  
  # La fórmula ahora incluye el efecto del bloque (Replica)
  formula <- as.formula(paste0("`", var, "` ~ `", tratamiento, "` + Replica"))
  modelo <- aov(formula, data = datos)
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  cat("\n--- Verificación de supuestos ---\n")
  
  # 1. QQ-plot en pantalla
  qqPlot(modelo$residuals, main=paste("QQ-plot:", var), col="red", lwd=2, pch=16)
  
  # 2. Residuos vs Ajustados en pantalla
  plot(modelo$fitted.values, modelo$residuals,
       main=paste("Residuos vs Ajustados:", var),
       xlab="Valores Ajustados", ylab="Residuos", pch=16, col="blue")
  abline(h=0, col="red", lwd=2)
  
  # Shapiro-Wilk
  if(length(unique(modelo$residuals)) > 1){
    SW <- shapiro.test(modelo$residuals)
    cat("\nShapiro-Wilk para", var, ":\n")
    print(SW)
  } else {
    cat("\nShapiro-Wilk no se puede calcular: todos los residuos son idénticos.\n")
  }
  
  # Bartlett y Levene
  if(length(unique(datos[[var]])) > 1){
    cat("\nPrueba de Bartlett para", var, ":\n")
    # Estas pruebas deben usar el modelo simplificado que evalúa la homogeneidad
    # de varianzas entre los grupos de tratamiento, no los bloques.
    print(bartlett.test(as.formula(paste0("`", var, "` ~ `", tratamiento, "`")), data=datos))
    
    cat("\nPrueba de Levene para", var, ":\n")
    print(leveneTest(as.formula(paste0("`", var, "` ~ `", tratamiento, "`")), data=datos, center="median"))
  } else {
    cat("Bartlett y Levene no se pueden calcular: variable constante.\n")
  }
  
  cat("\n------------------------------------\n")
}

#########################----Prueba múltiple de medias para todas las variables de respuesta


for (var in respuestas) {
  
  # Crear un nombre seguro: prefijo "var_" + reemplazar caracteres especiales
  nombre_var <- paste0("var_", gsub("[^[:alnum:]_]", "_", var))
  
  # Ignorar nombres que queden vacíos o solo guiones
  if(grepl("^var_[_]*$", nombre_var)){
    cat("\nVariable", var, "omitida: nombre no válido para análisis.\n")
    next
  }
  
  # Crear dataframe temporal con nombre seguro
  datos_temp <- datos
  names(datos_temp)[names(datos_temp) == var] <- nombre_var
  
  # Crear modelo ANDEVA, ahora con el efecto de Replica
  formula <- as.formula(paste0("`", nombre_var, "` ~ `", tratamiento, "` + Replica"))
  modelo <- aov(formula, data = datos_temp)
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  # -------------------------
  # Tukey HSD
  # -------------------------
  if(length(unique(datos_temp[[nombre_var]])) > 1){
    cat("\n--- Tukey HSD ---\n")
    HSD.test(modelo, tratamiento, console=TRUE)
  } else {
    cat("\nTukey HSD no se puede calcular: variable constante.\n")
  }
  
  # -------------------------
  # Scott-Knott
  # -------------------------
  if(length(unique(datos_temp[[nombre_var]])) > 1){
    cat("\n--- Scott-Knott ---\n")
    sk <- SK(modelo, which=tratamiento, dispersion="se", sig.level=0.05)
    print(summary(sk))
  } else {
    cat("\nScott-Knott no se puede calcular: variable constante o sin variación.\n")
  }
  
  cat("\n------------------------------------\n")
}


###############################################--Análisis gráfico--######################################

for (var in respuestas) {
  
  # Resumen con medias e IC95%
  resumen <- datos %>%
    group_by(.data[[tratamiento]]) %>%
    summarise(
      media = mean(.data[[var]], na.rm=TRUE),
      sd = sd(.data[[var]], na.rm=TRUE),
      n = n(),
      se = sd / sqrt(n),
      IC_inf = media - qt(0.975, df=n-1) * se,
      IC_sup = media + qt(0.975, df=n-1) * se,
      .groups="drop"
    )
  
  # Ordenar tratamientos por la media
  resumen <- resumen %>%
    arrange(media) %>%
    mutate(Trat_ordenado = factor(.data[[tratamiento]], levels = .data[[tratamiento]]))
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  # Paleta sobria
  colores <- "steelblue"
  
  # -------------------------
  # 1. Boxplot
  # -------------------------
  print(
    ggplot(datos, aes(x=.data[[tratamiento]], y=.data[[var]])) +
      geom_boxplot(fill="gray70", color="black") +
      labs(title=paste("Boxplot -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 2. Medias con vigotes (vertical)
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media)) +
      geom_point(size=3, color=colores) +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Medias con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 3. Gráfico de líneas
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media, group=1)) +
      geom_line(size=1, color=colores) +
      geom_point(size=3, color=colores) +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Líneas con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 4. Medias con vigotes horizontales
  # -------------------------
  print(
    ggplot(resumen, aes(y=Trat_ordenado, x=media)) +
      geom_point(size=3, color=colores) +
      geom_errorbarh(aes(xmin=IC_inf, xmax=IC_sup), height=0.2, color="black") +
      labs(title=paste("Medias con IC95% (horizontal) -", var), x=var, y=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 5. Barras con IC95% (ordenadas)
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media)) +
      geom_col(fill=colores, color="black") +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Barras con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
}

##############################################################################################################

# DCL
#------------------Modelo: ANDEVA para cada variable-------------------------------------

andeva<- aov(TCH ~ Tratamiento + fila + col)
anova(andeva)

#--------------------------ANDEVA para todas las variables--------------------------------------

tratamiento <- "Tratamiento"
respuestas <- c("TCH", "Brix", "Pol", "Pureza", "%_Jugo", "%_Fibra", "%_Humedad","Rendimiento")
filas <- "Fila" 
columnas <- "Columna" 


###############--ANDEVA para todas las variables de respuesta----------------------------------------------------
colnames(datos)

for (var in respuestas) {
  formula <- as.formula(paste0("`", var, "` ~ Tratamiento + `", filas, "` + `", columnas, "`"))
  modelo <- aov(formula, data = datos)
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  print(summary(modelo))
}

---
  
  ################################# Verificación de supuestos para todas las variables de respuesta---------------------------------

for (var in respuestas) {
  
  # La fórmula del modelo para supuestos también debe incluir ambas variables de bloqueo
  formula <- as.formula(paste0("`", var, "` ~ `", tratamiento, "` + `", filas, "` + `", columnas, "`"))
  modelo <- aov(formula, data = datos)
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  cat("\n--- Verificación de supuestos ---\n")
  
  # 1. QQ-plot en pantalla
  qqPlot(modelo$residuals, main=paste("QQ-plot:", var), col="red", lwd=2, pch=16)
  
  # 2. Residuos vs Ajustados en pantalla
  plot(modelo$fitted.values, modelo$residuals,
       main=paste("Residuos vs Ajustados:", var),
       xlab="Valores Ajustados", ylab="Residuos", pch=16, col="blue")
  abline(h=0, col="red", lwd=2)
  
  # Shapiro-Wilk
  if(length(unique(modelo$residuals)) > 1){
    SW <- shapiro.test(modelo$residuals)
    cat("\nShapiro-Wilk para", var, ":\n")
    print(SW)
  } else {
    cat("\nShapiro-Wilk no se puede calcular: todos los residuos son idénticos.\n")
  }
  
  # Bartlett y Levene
  if(length(unique(datos[[var]])) > 1){
    cat("\nPrueba de Bartlett para", var, ":\n")
    # Estas pruebas de homocedasticidad solo evalúan el efecto del tratamiento
    print(bartlett.test(as.formula(paste0("`", var, "` ~ `", tratamiento, "`")), data=datos))
    
    cat("\nPrueba de Levene para", var, ":\n")
    print(leveneTest(as.formula(paste0("`", var, "` ~ `", tratamiento, "`")), data=datos, center="median"))
  } else {
    cat("Bartlett y Levene no se pueden calcular: variable constante.\n")
  }
  
  cat("\n------------------------------------\n")
}

---
  
  #########################----Prueba múltiple de medias para todas las variables de respuesta
  
  for (var in respuestas) {
    
    # Crear un nombre seguro
    nombre_var <- paste0("var_", gsub("[^[:alnum:]_]", "_", var))
    
    # Ignorar nombres que queden vacíos
    if(grepl("^var_[_]*$", nombre_var)){
      cat("\nVariable", var, "omitida: nombre no válido para análisis.\n")
      next
    }
    
    # Crear dataframe temporal
    datos_temp <- datos
    names(datos_temp)[names(datos_temp) == var] <- nombre_var
    
    # La fórmula para las PMM también incluye ambas variables de bloqueo
    formula <- as.formula(paste0("`", nombre_var, "` ~ `", tratamiento, "` + `", filas, "` + `", columnas, "`"))
    modelo <- aov(formula, data = datos_temp)
    
    cat("\n====================================\n")
    cat("Variable:", var, "\n")
    cat("====================================\n")
    
    # -------------------------
    # Tukey HSD
    # -------------------------
    if(length(unique(datos_temp[[nombre_var]])) > 1){
      cat("\n--- Tukey HSD ---\n")
      HSD.test(modelo, tratamiento, console=TRUE)
    } else {
      cat("\nTukey HSD no se puede calcular: variable constante.\n")
    }
    
    # -------------------------
    # Scott-Knott
    # -------------------------
    if(length(unique(datos_temp[[nombre_var]])) > 1){
      cat("\n--- Scott-Knott ---\n")
      sk <- SK(modelo, which=tratamiento, dispersion="se", sig.level=0.05)
      print(summary(sk))
    } else {
      cat("\nScott-Knott no se puede calcular: variable constante o sin variación.\n")
    }
    
    cat("\n------------------------------------\n")
  }

---
  
  ###############################################--Análisis gráfico--######################################

for (var in respuestas) {
  # Resumen con medias e IC95%
  resumen <- datos %>%
    group_by(.data[[tratamiento]]) %>%
    summarise(
      media = mean(.data[[var]], na.rm=TRUE),
      sd = sd(.data[[var]], na.rm=TRUE),
      n = n(),
      se = sd / sqrt(n),
      IC_inf = media - qt(0.975, df=n-1) * se,
      IC_sup = media + qt(0.975, df=n-1) * se,
      .groups="drop"
    )
  
  # Ordenar tratamientos por la media
  resumen <- resumen %>%
    arrange(media) %>%
    mutate(Trat_ordenado = factor(.data[[tratamiento]], levels = .data[[tratamiento]]))
  
  cat("\n====================================\n")
  cat("Variable:", var, "\n")
  cat("====================================\n")
  
  # Paleta sobria
  colores <- "steelblue"
  
  # -------------------------
  # 1. Boxplot
  # -------------------------
  print(
    ggplot(datos, aes(x=.data[[tratamiento]], y=.data[[var]])) +
      geom_boxplot(fill="gray70", color="black") +
      labs(title=paste("Boxplot -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 2. Medias con vigotes (vertical)
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media)) +
      geom_point(size=3, color=colores) +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Medias con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 3. Gráfico de líneas
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media, group=1)) +
      geom_line(size=1, color=colores) +
      geom_point(size=3, color=colores) +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Líneas con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 4. Medias con vigotes horizontales
  # -------------------------
  print(
    ggplot(resumen, aes(y=Trat_ordenado, x=media)) +
      geom_point(size=3, color=colores) +
      geom_errorbarh(aes(xmin=IC_inf, xmax=IC_sup), height=0.2, color="black") +
      labs(title=paste("Medias con IC95% (horizontal) -", var), x=var, y=tratamiento) +
      theme_minimal()
  )
  
  # -------------------------
  # 5. Barras con IC95% (ordenadas)
  # -------------------------
  print(
    ggplot(resumen, aes(x=Trat_ordenado, y=media)) +
      geom_col(fill=colores, color="black") +
      geom_errorbar(aes(ymin=IC_inf, ymax=IC_sup), width=0.2, color="black") +
      labs(title=paste("Barras con IC95% -", var), y=var, x=tratamiento) +
      theme_minimal()
  )
}



###############################--Experimentos factoriales (Arreglo factorial combinatorio)--##################################################################

# DCA:
#-------------------------Modelo: ANDEVA para una variable-------------------------------------------
colnames(datos)
FA<- as.factor(Vinaza)                   #Agregar los factores que sean necesarios
FB<- as.factor(N_kg)
VR<- as.vector(TCH)
y<- as.numeric(VR)

andeva<- aov(y~FA*FB)
anova(andeva)





#----------------------ANDEVA para todas las variables---------------------------------
colnames(datos)

factores <- c("Vinaza", "N_kg")
for (f in factores) {
  datos[[f]] <- as.factor(datos[[f]])
}

respuestas <- c("TCH", "Brix", "Pol", "Pureza", "Jugo", "Fibra", "Humedad","Rendimiento")

for (var in respuestas) {
  # Construir la fórmula dinámica
  formula_anidada <- paste(factores, collapse = "*")
  formula <- as.formula(paste0("`", var, "` ~ ", formula_anidada))
  
  # Ajustar modelo ANDEVA
  modelo <- aov(formula, data = datos)
  
  cat("\n====================================\n")
  cat("ANDEVA para la variable:", var, "\n")
  cat("====================================\n")
  
  print(summary(modelo))
}

####################################### Verificación de supuestos para todas las variables de respuesta

for (var in respuestas) {
  # Modelo para supuestos con todas las interacciones
  formula_anidada <- paste(factores, collapse = "*")
  formula <- as.formula(paste0("`", var, "` ~ ", formula_anidada))
  modelo <- aov(formula, data = datos)
  
  cat("\n====================================\n")
  cat("Supuestos para la variable:", var, "\n")
  cat("====================================\n")
  
  cat("\n--- Verificación de supuestos ---\n")
  
  # 1. QQ-plot y Shapiro-Wilk para normalidad de los residuos
  qqPlot(modelo$residuals, main = paste("QQ-plot:", var), col = "red", lwd = 2, pch = 16)
  if (length(unique(modelo$residuals)) > 1) {
    SW <- shapiro.test(modelo$residuals)
    cat("\nShapiro-Wilk para", var, ":\n")
    print(SW)
  } else {
    cat("\nShapiro-Wilk no se puede calcular: todos los residuos son idénticos.\n")
  }
  
  # 2. Residuos vs Ajustados para homocedasticidad
  plot(modelo$fitted.values, modelo$residuals,
       main = paste("Residuos vs Ajustados:", var),
       xlab = "Valores Ajustados", ylab = "Residuos", pch = 16, col = "blue")
  abline(h = 0, col = "red", lwd = 2)
  
  # 3. Pruebas de homocedasticidad (Bartlett y Levene)
  cat("\nPrueba de Bartlett para", var, ":\n")
  # Para Bartlett y Levene, se usa una variable de interacción que agrupa todos los factores
  interaccion_completa <- paste(factores, collapse = ":")
  formula_interaccion <- as.formula(paste0("`", var, "` ~ ", "interaction(", interaccion_completa, ")"))
  
  if (length(unique(datos[[var]])) > 1) {
    tryCatch({
      print(bartlett.test(formula_interaccion, data = datos))
    }, error = function(e) {
      cat("Error al ejecutar bartlett.test:", e$message, "\n")
    })
    
    cat("\nPrueba de Levene para", var, ":\n")
    tryCatch({
      print(leveneTest(formula_interaccion, data = datos, center = "median"))
    }, error = function(e) {
      cat("Error al ejecutar leveneTest:", e$message, "\n")
    })
  } else {
    cat("Bartlett y Levene no se pueden calcular: variable constante.\n")
  }
}



###################--Prueba múltiple de medias para todas las variables de respuesta-################

# Aseguramos que los factores realmente sean factores
for (f in factores) {
  datos[[f]] <- as.factor(datos[[f]])
}

for (var in respuestas) {
  cat("\n====================================\n")
  cat("PMM para la variable:", var, "\n")
  cat("====================================\n")
  
  # ======================
  # Interacción completa
  # ======================
  datos$interaccion_completa <- interaction(datos[, factores], sep = "_")
  modelo_interaccion <- aov(as.formula(paste0("`", var, "` ~ interaccion_completa")), data = datos)
  
  if (length(unique(datos[[var]])) > 1) {
    cat("\n--- Tukey HSD para interacción completa ---\n")
    HSD.test(modelo_interaccion, "interaccion_completa", console = TRUE)
    
    cat("\n--- Scott-Knott para interacción completa ---\n")
    tryCatch({
      sk <- SK(modelo_interaccion, which = "interaccion_completa", dispersion = "se", sig.level = 0.05)
      print(summary(sk))
    }, error = function(e) {
      cat("⚠️ Error en Scott-Knott (interacción):", e$message, "\n")
    })
  } else {
    cat("Pruebas de medias no se pueden calcular: variable constante.\n")
  }
  
  # ======================
  # Factores individuales
  # ======================
  for (f in factores) {
    cat("\n--- Tukey HSD para factor:", f, "---\n")
    modelo_factor <- aov(as.formula(paste0("`", var, "` ~ ", f)), data = datos)
    HSD.test(modelo_factor, f, console = TRUE)
    
    cat("\n--- Scott-Knott para factor:", f, "---\n")
    tryCatch({
      sk_f <- SK(modelo_factor, which = f, dispersion = "se", sig.level = 0.05)
      print(summary(sk_f))
    }, error = function(e) {
      cat("⚠️ Error en Scott-Knott para", f, ":", e$message, "\n")
    })
  }
  
  # Eliminar columna temporal de interacción
  datos$interaccion_completa <- NULL
  
  cat("\n------------------------------------\n")
}


########### Análisis gráfico: Gráfico de interacciones--###################################

for (var in respuestas) {
  cat("\n====================================\n")
  cat("Gráficos para:", var, "\n")
  cat("====================================\n")
  
  # ---------------------------------------------
  # Gráficos para factores individuales
  # ---------------------------------------------
  for (f in factores) {
    # Calcular medias e intervalos de confianza para cada factor
    resumen_factor <- datos %>%
      group_by(.data[[f]]) %>%
      summarise(
        media = mean(.data[[var]], na.rm = TRUE),
        se = sd(.data[[var]], na.rm = TRUE) / sqrt(n()),
        .groups = "drop"
      ) %>%
      arrange(media) %>%
      mutate(Factor_Ordenado = factor(.data[[f]], levels = .data[[f]]))
    
    # 1. Gráfico de barras ascendente con error
    p_barra <- ggplot(resumen_factor, aes(x = Factor_Ordenado, y = media)) +
      geom_bar(stat = "identity", fill = "gray70", color = "black") +
      geom_errorbar(aes(ymin = media - se, ymax = media + se), width = 0.2) +
      labs(title = paste("Barras ascendentes -", f, "-", var),
           x = f, y = var) +
      theme_minimal()
    print(p_barra)
    
    # 2. Gráfico de puntos con vigotes de error
    p_punto <- ggplot(resumen_factor, aes(x = Factor_Ordenado, y = media)) +
      geom_point(size = 3, color = "steelblue") +
      geom_errorbar(aes(ymin = media - se, ymax = media + se), width = 0.2) +
      labs(title = paste("Puntos con error -", f, "-", var),
           x = f, y = var) +
      theme_minimal()
    print(p_punto)
  }
  
  # ---------------------------------------------
  # Gráficos de interacción
  # ---------------------------------------------
  if (length(factores) > 1) {
    for (i in 1:(length(factores) - 1)) {
      for (j in (i + 1):length(factores)) {
        factor1 <- factores[i]
        factor2 <- factores[j]
        
        # Calcular medias e intervalos de confianza para cada interacción
        resumen_interaccion <- datos %>%
          group_by(.data[[factor1]], .data[[factor2]]) %>%
          summarise(
            media = mean(.data[[var]], na.rm = TRUE),
            se = sd(.data[[var]], na.rm = TRUE) / sqrt(n()),
            .groups = "drop"
          ) %>%
          ungroup() %>%
          mutate(Interaccion = interaction(.data[[factor1]], .data[[factor2]])) %>%
          arrange(media) %>%
          mutate(Interaccion_Ordenada = factor(Interaccion, levels = Interaccion))
        
        # 1. Gráfico de interacción de líneas SIN vigotes
        p_lineas <- ggplot(resumen_interaccion, aes(x = .data[[factor1]], y = media, group = .data[[factor2]], color = .data[[factor2]])) +
          geom_line(size = 1.2) +
          geom_point(size = 3) +
          labs(title = paste("Interacción entre", factor1, "y", factor2, "-", var),
               x = factor1,
               y = var,
               color = factor2) +
          theme_minimal()
        print(p_lineas)
        
        # 2. Gráfico de barras ascendente para la interacción CON vigotes
        p_barras_interaccion <- ggplot(resumen_interaccion, aes(x = Interaccion_Ordenada, y = media)) +
          geom_bar(stat = "identity", fill = "lightcoral", color = "black") +
          geom_errorbar(aes(ymin = media - se, ymax = media + se), width = 0.2) +
          labs(title = paste("Barras ascendentes de la interacción -", var),
               x = "Interacción", y = var) +
          theme_minimal()
        print(p_barras_interaccion)
        
        # 3. Gráfico de puntos para la interacción CON vigotes
        p_puntos_interaccion <- ggplot(resumen_interaccion, aes(x = Interaccion_Ordenada, y = media)) +
          geom_point(size = 3, color = "firebrick") +
          geom_errorbar(aes(ymin = media - se, ymax = media + se), width = 0.2) +
          labs(title = paste("Puntos con error de la interacción -", var),
               x = "Interacción", y = var) +
          theme_minimal()
        print(p_puntos_interaccion)
      }
    }
  }

#---------------------------------------------------------------------------
# DBCA:
################################--ANDEVA para todas las variables de respuesta----------

factores <- c("Vinaza", "N_kg") 
for (f in factores) {
  datos[[f]] <- as.factor(datos[[f]])
}

respuestas <- c("TCH", "Brix", "Pol", "Pureza", "Jugo", "Fibra", "Humedad","Rendimiento")

for (var in respuestas) {
  formula_anidada <- paste(factores, collapse = "*")
  formula <- as.formula(paste0("`", var, "` ~ Replica + ", formula_anidada))  # bloque agregado
  
  modelo <- aov(formula, data = datos)
  
  cat("\n====================================\n")
  cat("ANDEVA para la variable:", var, "\n")
  cat("====================================\n")
  
  print(summary(modelo))
}


######################### Verificación de supuestos para todas las variables de respuesta

for (var in respuestas) {
  formula <- as.formula(paste0("`", var, "` ~ Replica + ", paste(factores, collapse = "*")))
  modelo <- aov(formula, data = datos)
  
  # QQ-plot y Shapiro-Wilk
  qqPlot(modelo$residuals, main = paste("QQ-plot:", var), col = "red", lwd = 2, pch = 16)
  if(length(unique(modelo$residuals)) > 1){
    SW <- shapiro.test(modelo$residuals)
    cat("\nShapiro-Wilk para", var, ":\n")
    print(SW)
  }
  
  # Residuos vs Ajustados
  plot(modelo$fitted.values, modelo$residuals,
       main=paste("Residuos vs Ajustados:", var),
       xlab="Valores Ajustados", ylab="Residuos", pch=16, col="blue")
  abline(h=0, col="red", lwd=2)
  
  # Bartlett y Levene usando interacción de factores de tratamiento
  formula_interaccion <- as.formula(paste0("`", var, "` ~ interaction(", paste(factores, collapse = ":"), ")"))
  
  if(length(unique(datos[[var]])) > 1){
    cat("\nPrueba de Bartlett para", var, ":\n")
    tryCatch({
      print(bartlett.test(formula_interaccion, data = datos))
    }, error = function(e){cat("Error Bartlett:", e$message, "\n")})
    
    cat("\nPrueba de Levene para", var, ":\n")
    tryCatch({
      print(leveneTest(formula_interaccion, data = datos, center="median"))
    }, error = function(e){cat("Error Levene:", e$message, "\n")})
  }
}
###########################--Prueba múltiple de medias (Tukey y Scott-Knott)------

for (f in factores) {
  datos[[f]] <- as.factor(datos[[f]])
}

for (var in respuestas) {
  cat("\n====================================\n")
  cat("Pruebas de medias para la variable:", var, "\n")
  cat("====================================\n")
  
  # ======================
  # Interacción completa
  # ======================
  cat("\n--- Interacción completa ---\n")
  datos$interaccion_completa <- interaction(datos[, factores], sep = "_")
  modelo_interaccion <- aov(as.formula(paste0("`", var, "` ~ interaccion_completa")), data = datos)
  
  if(length(unique(datos[[var]])) > 1){
    cat("\nTukey HSD - Interacción completa:\n")
    HSD.test(modelo_interaccion, "interaccion_completa", console = TRUE)
    
    cat("\nScott-Knott - Interacción completa:\n")
    try({
      sk <- SK(modelo_interaccion, which="interaccion_completa", dispersion="se", sig.level=0.05)
      print(summary(sk))
    })
  } else {
    cat("Pruebas de medias no se pueden calcular: variable constante.\n")
  }
  
  # ======================
  # Factores individuales
  # ======================
  for (f in factores) {
    cat("\n--- Factor:", f, "---\n")
    modelo_factor <- aov(as.formula(paste0("`", var, "` ~ ", f)), data = datos)
    
    cat("\nTukey HSD - Factor", f, ":\n")
    HSD.test(modelo_factor, f, console = TRUE)
    
    cat("\nScott-Knott - Factor", f, ":\n")
    try({
      sk_f <- SK(modelo_factor, which=f, dispersion="se", sig.level=0.05)
      print(summary(sk_f))
    })
  }
  
  # Eliminar columna temporal
  datos$interaccion_completa <- NULL
  
  cat("\n------------------------------------\n")
}

########### Análisis gráfico: Gráfico de interacciones--###################################

for (var in respuestas) {
  cat("\n====================================\n")
  cat("Gráficos para:", var, "\n")
  cat("====================================\n")
  
  # ---------------------------------------------
  # Gráficos para factores individuales
  # ---------------------------------------------
  for (f in factores) {
    resumen_factor <- datos %>%
      group_by(.data[[f]]) %>%
      summarise(
        media = mean(.data[[var]], na.rm = TRUE),
        .groups = "drop"
      ) %>%
      arrange(media) %>%
      mutate(Factor_Ordenado = factor(.data[[f]], levels = .data[[f]]))
    
    # Barras ascendentes
    p_barra <- ggplot(resumen_factor, aes(x = Factor_Ordenado, y = media)) +
      geom_bar(stat = "identity", fill = "gray70", color = "black") +
      labs(title = paste("Barras -", f, "-", var),
           x = f, y = var) +
      theme_minimal()
    print(p_barra)
    
    # Puntos
    p_punto <- ggplot(resumen_factor, aes(x = Factor_Ordenado, y = media)) +
      geom_point(size = 3, color = "steelblue") +
      labs(title = paste("Puntos -", f, "-", var),
           x = f, y = var) +
      theme_minimal()
    print(p_punto)
  }
  
  # ---------------------------------------------
  # Gráficos de interacción
  # ---------------------------------------------
  if (length(factores) > 1) {
    for (i in 1:(length(factores) - 1)) {
      for (j in (i + 1):length(factores)) {
        factor1 <- factores[i]
        factor2 <- factores[j]
        
        resumen_interaccion <- datos %>%
          group_by(.data[[factor1]], .data[[factor2]]) %>%
          summarise(
            media = mean(.data[[var]], na.rm = TRUE),
            .groups = "drop"
          ) %>%
          ungroup() %>%
          mutate(Interaccion = interaction(.data[[factor1]], .data[[factor2]])) %>%
          arrange(media) %>%
          mutate(Interaccion_Ordenada = factor(Interaccion, levels = Interaccion))
        
        # 1. Línea de interacción SIN vigotes
        p_lineas <- ggplot(resumen_interaccion, aes(x = .data[[factor1]], y = media, group = .data[[factor2]], color = .data[[factor2]])) +
          geom_line(size = 1.2) +
          geom_point(size = 3) +
          labs(title = paste("Interacción entre", factor1, "y", factor2, "-", var),
               x = factor1, y = var, color = factor2) +
          theme_minimal()
        print(p_lineas)
        
        # 2. Barras de interacción SIN vigotes
        p_barras_interaccion <- ggplot(resumen_interaccion, aes(x = Interaccion_Ordenada, y = media)) +
          geom_bar(stat = "identity", fill = "lightcoral", color = "black") +
          labs(title = paste("Barras de la interacción -", var),
               x = "Interacción", y = var) +
          theme_minimal()
        print(p_barras_interaccion)
        
        # 3. Puntos de interacción SIN vigotes
        p_puntos_interaccion <- ggplot(resumen_interaccion, aes(x = Interaccion_Ordenada, y = media)) +
          geom_point(size = 3, color = "firebrick") +
          labs(title = paste("Puntos de la interacción -", var),
               x = "Interacción", y = var) +
          theme_minimal()
        print(p_puntos_interaccion)
      }
    }
  }
}



###############################--Experimento factorial con arreglo en parcelas divididas--#############################

# DCA:
#-------------------------Modelo: ANDEVA para una variable-------------------------------------------
colnames(datos)
FA<- as.factor(Vinaza)
FB<- as.factor(N_kg)
rep<- as.factor(Replica)
VR<- as.vector(TCH)
y<- as.numeric(VR)

andeva<- aov(y~FA+FB+Error(rep/FA)+FA:FB)
summary(andeva)
#----------------------ANDEVA para todas las variables---------------------------------

factores <- c("Vinaza", "N_kg")
rep <- "Replica"
respuestas <- c("TCH", "Brix", "Pol", "Pureza", "Jugo", "Fibra", "Humedad","Rendimiento")

for(f in c(factores, rep)) datos[[f]] <- as.factor(datos[[f]]) # Aseguramos que los factores y réplica sean factores


for(var in respuestas){
  cat("\n====================================\n")
  cat("ANDEVA para la variable:", var, "\n")
  cat("====================================\n")
  
  # Construir fórmula para parcelas divididas
  formula_anidada <- paste0("`", var, "` ~ ", factores[1], " + Error(", rep, "/", factores[1], ") + ",
                            factores[2], " + ", factores[1], ":", factores[2])
  
  modelo <- aov(as.formula(formula_anidada), data = datos)
  print(summary(modelo))
}

############################ Verificación de supuestos ############################
for(var in respuestas){
  
  # Modelo con único error (residual) para pruebas de supuestos
  formula_modelo <- paste0("`", var, "` ~ ", factores[1], "*", factores[2], " + ", rep, "/", factores[1])
  modelo <- aov(as.formula(formula_modelo), data = datos)
  
  cat("\n====================================\n")
  cat("Supuestos para la variable:", var, "\n")
  cat("====================================\n")
  
  # QQ-plot y Shapiro-Wilk
  qqPlot(modelo$residuals, main=paste("QQ-plot:", var), col="red", lwd=2, pch=16)
  if(length(unique(modelo$residuals))>1){
    cat("\nShapiro-Wilk:\n")
    print(shapiro.test(modelo$residuals))
  }
  
  # Residuos vs Ajustados
  plot(modelo$fitted.values, modelo$residuals, col="blue", pch=16,
       xlab="Valores Ajustados", ylab="Residuos",
       main=paste("Residuos vs Ajustados:", var))
  abline(h=0, col="red", lwd=2)
  
  # Homocedasticidad (Bartlett y Levene)
  formula_interaccion <- as.formula(paste0("`", var, "` ~ interaction(", factores[1], ",", factores[2], ")"))
  if(length(unique(datos[[var]]))>1){
    cat("\nBartlett test:\n")
    print(bartlett.test(formula_interaccion, data=datos))
    cat("\nLevene test (mediana):\n")
    print(leveneTest(formula_interaccion, data=datos, center="median"))
  }
}

############################ PMM para factores e interacción ############################
for(var in respuestas){
  cat("\n====================================\n")
  cat("PMM para la variable:", var, "\n")
  cat("====================================\n")
  
  # Interacción completa
  datos$interaccion_completa <- interaction(datos[, factores], sep="_")
  modelo_interaccion <- aov(as.formula(paste0("`", var, "` ~ interaccion_completa")), data=datos)
  
  if(length(unique(datos[[var]]))>1){
    cat("\n--- Tukey HSD para interacción ---\n")
    HSD.test(modelo_interaccion, "interaccion_completa", console=TRUE)
    
    cat("\n--- Scott-Knott para interacción ---\n")
    try({sk <- SK(modelo_interaccion, which="interaccion_completa", dispersion="se", sig.level=0.05); print(summary(sk))})
  }
  
  # Factores individuales
  for(f in factores){
    modelo_factor <- aov(as.formula(paste0("`", var, "` ~ ", f)), data=datos)
    
    cat("\n--- Tukey HSD para factor:", f, "---\n")
    HSD.test(modelo_factor, f, console=TRUE)
    
    cat("\n--- Scott-Knott para factor:", f, "---\n")
    try({sk_f <- SK(modelo_factor, which=f, dispersion="se", sig.level=0.05); print(summary(sk_f))})
  }
  
  datos$interaccion_completa <- NULL
}

############################ Gráficos ############################
for(var in respuestas){
  cat("\n====================================\n")
  cat("Gráficos para:", var, "\n")
  cat("====================================\n")
  
  # Factores individuales
  for(f in factores){
    resumen <- datos %>%
      group_by(.data[[f]]) %>%
      summarise(media=mean(.data[[var]], na.rm=TRUE),
                se=sd(.data[[var]], na.rm=TRUE)/sqrt(n()), .groups="drop") %>%
      arrange(media) %>%
      mutate(factor_ordenado=factor(.data[[f]], levels=.data[[f]]))
    
    # Barras ascendentes con vigotes
    p1 <- ggplot(resumen, aes(x=factor_ordenado, y=media)) +
      geom_bar(stat="identity", fill="gray70", color="black") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Barras -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p1)
    
    # Puntos con vigotes de error
    p2 <- ggplot(resumen, aes(x=factor_ordenado, y=media)) +
      geom_point(size=3, color="steelblue") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Puntos con error -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p2)
  }
  
  # Interacción
  if(length(factores)>1){
    factor1 <- factores[1]
    factor2 <- factores[2]
    
    resumen_inter <- datos %>%
      group_by(.data[[factor1]], .data[[factor2]]) %>%
      summarise(media=mean(.data[[var]], na.rm=TRUE),
                .groups="drop") %>%  # eliminamos SE para la línea
      ungroup() %>%
      mutate(interaccion=interaction(.data[[factor1]], .data[[factor2]])) %>%
      arrange(media) %>%
      mutate(interaccion_ordenada=factor(interaccion, levels=interaccion))
    
    # Línea de interacción SIN vigotes de error
    p_line <- ggplot(resumen_inter, aes(x=.data[[factor1]], y=media, group=.data[[factor2]], color=.data[[factor2]])) +
      geom_line(size=1.2) + geom_point(size=3) +
      labs(title=paste("Interacción", factor1, "x", factor2, "-", var), x=factor1, y=var, color=factor2) +
      theme_minimal()
    print(p_line)
    
    # Barras de interacción CON vigotes de error
    resumen_inter_barras <- datos %>%
      group_by(.data[[factor1]], .data[[factor2]]) %>%
      summarise(media=mean(.data[[var]], na.rm=TRUE),
                se=sd(.data[[var]], na.rm=TRUE)/sqrt(n()), .groups="drop") %>%
      ungroup() %>%
      mutate(interaccion=interaction(.data[[factor1]], .data[[factor2]])) %>%
      arrange(media) %>%
      mutate(interaccion_ordenada=factor(interaccion, levels=interaccion))
    
    p_bar <- ggplot(resumen_inter_barras, aes(x=interaccion_ordenada, y=media)) +
      geom_bar(stat="identity", fill="lightcoral", color="black") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Barras de interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_bar)
  }
}
