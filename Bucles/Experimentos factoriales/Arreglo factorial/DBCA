paquetes <- c(
  "openxlsx", "fBasics", "psych", "modeest", "ggrepel", "GGally", 
  "mice", "corrplot", "readxl", "doebioresearch", "performance", "dplyr", 
  "ScottKnott", "agricolae", "car", "broom", "data.table", "emmeans", 
  "ggplot2", "tidyverse", "lattice", "nlme", "lme4", "lmerTest", "multcomp", 
  "rstatix", "ggpubr", "see", "MASS", "lsmeans", "scales", "lmtest", "multcompView", 
  "googlesheets4", "googledrive", "clipr", "FactoMineR", "factoextra", 
  "glmmTMB", "DHARMa", "MuMIn", "hnp", "effects", "sjstats", "ExpDes", "sf", "tmap", "terra",
  "RVAideMemoire", "RColorBrewer", "DiagrammeR", "missMDA")

# Verifica cuáles no están instalados
no_instalados <- paquetes[!(paquetes %in% installed.packages()[,"Package"])];no_instalados

# Instala los que faltan
if(length(no_instalados)) {
  install.packages(no_instalados)
} else {
  message("Todos los paquetes ya están instalados.")
}

# Carga todos los paquetes (opcional)
lapply(paquetes, library, character.only = TRUE)
#-----------------------------------------------------------------------------------------------
archivo <- file.choose() #Abrir el archivo Excel  
hojas <- excel_sheets(archivo); hojas
for (h in hojas) {
  cat("\n--- Hoja:", h, "---\n")
  datos_hoja <- read_excel(archivo, sheet = h, n_max = 10)  # solo primeras 5 filas
  print(datos_hoja)
}
datos <- read_excel(archivo, sheet = 9)

##############################################################################################################################################

# ==========================================
# ANDEVA TRIFACTORIAL AUTOMATIZADO CON GRAFICOS
# ==========================================

# Cargar librerías
library(dplyr)
library(ggplot2)
library(car)
library(agricolae)   # HSD.test
library(SK)           # Scott-Knott
library(car)
library(performance)

# -----------------------------
# 1️⃣ Preparación de datos
# -----------------------------

# Factores reales
factores <- c("Tratamiento", "Vinaza", "N_kg")
bloque <- "Replica"

# Variables de respuesta
respuestas <- c("TCH", "Brix", "Pol", "Pureza", "Jugo", "Fibra", "Humedad","Rendimiento")

# Convertir factores y respuestas
for(f in factores) datos[[f]] <- as.factor(datos[[f]])
datos[[bloque]] <- as.factor(datos[[bloque]])

for(v in respuestas) datos[[v]] <- as.numeric(datos[[v]])

# -----------------------------
# 2️⃣ ANDEVA trifactorial con bloque
# -----------------------------
for(var in respuestas){
  cat("\n============================================\n")
  cat("📊 ANDEVA trifactorial para:", var, "\n")
  cat("============================================\n")
  
  formula_anidada <- paste(factores, collapse="*")
  formula <- as.formula(paste0("`", var, "` ~ ", bloque, " + ", formula_anidada))
  modelo <- aov(formula, data=datos)
  
  # Mostrar ANDEVA
  print(summary(modelo))
  
  # Coeficiente de variación
  cv <- (sqrt(mean(modelo$residuals^2)) / mean(datos[[var]], na.rm=TRUE))*100
  cat("Coeficiente de variación (CV%) =", round(cv,2), "\n")
  
  # -----------------------------
  # 3️⃣ Supuestos
  # -----------------------------
  
  # Normalidad de residuos
  qqPlot(modelo$residuals, main=paste("QQ-plot:", var), col="red", lwd=2, pch=16)
  if(length(unique(modelo$residuals)) > 1){
    sw <- shapiro.test(modelo$residuals)
    cat("\nShapiro-Wilk para", var, ":\n")
    print(sw)
  }
  
  # Residuos vs valores ajustados
  plot(modelo$fitted.values, modelo$residuals,
       main=paste("Residuos vs Ajustados:", var),
       xlab="Valores Ajustados", ylab="Residuos", pch=16, col="blue")
  abline(h=0, col="red", lwd=2)
  
  # Homogeneidad de varianzas (Levene y Bartlett)
  formula_interaccion <- as.formula(paste0("`", var, "` ~ interaction(", paste(factores, collapse=":"), ")"))
  if(length(unique(datos[[var]])) > 1){
    cat("\nPrueba de Bartlett para", var, ":\n")
    tryCatch(print(bartlett.test(formula_interaccion, data=datos)),
             error=function(e) cat("Error Bartlett:", e$message, "\n"))
    
    cat("\nPrueba de Levene para", var, ":\n")
    tryCatch(print(leveneTest(formula_interaccion, data=datos, center="median")),
             error=function(e) cat("Error Levene:", e$message, "\n"))
  }
  
  # Diagnóstico gráfico completo
  par(mfrow=c(2,2))
  plot(modelo)
  par(mfrow=c(1,1))
  
  # Verificación con performance
  performance::check_normality(modelo)
  performance::check_model(modelo)
}

# -----------------------------
# 4️⃣ Pruebas de medias múltiples
# -----------------------------
for(var in respuestas){
  cat("\n============================================\n")
  cat("Pruebas de medias para:", var, "\n")
  cat("============================================\n")
  
  # Interacción completa
  datos$interaccion_completa <- interaction(datos[,factores], sep="_")
  modelo_interaccion <- aov(as.formula(paste0("`", var, "` ~ interaccion_completa")), data=datos)
  
  if(length(unique(datos[[var]])) > 1){
    cat("\nTukey HSD - Interacción completa:\n")
    HSD.test(modelo_interaccion, "interaccion_completa", console=TRUE)
    
    cat("\nScott-Knott - Interacción completa:\n")
    try({
      sk <- SK(modelo_interaccion, which="interaccion_completa", dispersion="se", sig.level=0.05)
      print(summary(sk))
    })
  }
  
  # Factores individuales
  for(f in factores){
    modelo_factor <- aov(as.formula(paste0("`", var, "` ~ ", f)), data=datos)
    
    cat("\nTukey HSD - Factor", f, ":\n")
    HSD.test(modelo_factor, f, console=TRUE)
    
    cat("\nScott-Knott - Factor", f, ":\n")
    try({
      sk_f <- SK(modelo_factor, which=f, dispersion="se", sig.level=0.05)
      print(summary(sk_f))
    })
  }
  
  datos$interaccion_completa <- NULL
}

# -----------------------------
# 5️⃣ Gráficos por variable y factor
# -----------------------------
for(var in respuestas){
  cat("\n============================================\n")
  cat("Gráficos para:", var, "\n")
  cat("============================================\n")
  
  # Gráficos por factor individual
  for(f in factores){
    resumen <- datos %>%
      group_by(.data[[f]]) %>%
      summarise(media = mean(.data[[var]], na.rm=TRUE),
                se = sd(.data[[var]], na.rm=TRUE)/sqrt(n()),
                .groups="drop")
    
    # Barras con SE
    p_bar <- ggplot(resumen, aes(x=.data[[f]], y=media)) +
      geom_bar(stat="identity", fill="gray70", color="black") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Barras con SE -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p_bar)
    
    # Puntos con SE
    p_point <- ggplot(resumen, aes(x=.data[[f]], y=media)) +
      geom_point(size=3, color="steelblue") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Puntos con SE -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p_point)
    
    # Boxplot
    p_box <- ggplot(datos, aes(x=.data[[f]], y=.data[[var]])) +
      geom_boxplot(fill="lightblue") +
      labs(title=paste("Boxplot -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p_box)
  }
  
  # Gráficos de interacción (primeros dos factores)
  if(length(factores) > 1){
    f1 <- factores[1]
    f2 <- factores[2]
    
    resumen_inter <- datos %>%
      group_by(.data[[f1]], .data[[f2]]) %>%
      summarise(media = mean(.data[[var]], na.rm=TRUE),
                se = sd(.data[[var]], na.rm=TRUE)/sqrt(n()),
                .groups="drop") %>%
      ungroup() %>%
      mutate(Interaccion = interaction(.data[[f1]], .data[[f2]]))
    
    # Línea de interacción
    p_line <- ggplot(resumen_inter, aes(x=.data[[f1]], y=media, group=.data[[f2]], color=.data[[f2]])) +
      geom_line(size=1.2) + geom_point(size=3) +
      labs(title=paste("Interacción líneas -", f1,"x",f2,"-", var), x=f1, y=var, color=f2) +
      theme_minimal()
    print(p_line)
    
    # Boxplot de interacción
    p_box_inter <- ggplot(datos, aes(x=interaction(.data[[f1]], .data[[f2]]), y=.data[[var]])) +
      geom_boxplot(fill="lightgreen") +
      labs(title=paste("Boxplot interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_box_inter)
  }
}
