paquetes <- c(
  "openxlsx", "fBasics", "psych", "modeest", "ggrepel", "GGally", 
  "mice", "corrplot", "readxl", "doebioresearch", "performance", "dplyr", 
  "ScottKnott", "agricolae", "car", "broom", "data.table", "emmeans", 
  "ggplot2", "tidyverse", "lattice", "nlme", "lme4", "lmerTest", "multcomp", 
  "rstatix", "ggpubr", "see", "MASS", "lsmeans", "scales", "lmtest", "multcompView", 
  "googlesheets4", "googledrive", "clipr", "FactoMineR", "factoextra", 
  "glmmTMB", "DHARMa", "MuMIn", "hnp", "effects", "sjstats", "ExpDes", "sf", "tmap", "terra",
  "RVAideMemoire", "RColorBrewer", "DiagrammeR", "missMDA")

# Verifica cuáles no están instalados
no_instalados <- paquetes[!(paquetes %in% installed.packages()[,"Package"])];no_instalados

# Instala los que faltan
if(length(no_instalados)) {
  install.packages(no_instalados)
} else {
  message("Todos los paquetes ya están instalados.")
}

# Carga todos los paquetes (opcional)
lapply(paquetes, library, character.only = TRUE)
#-----------------------------------------------------------------------------------------------
archivo <- file.choose() #Abrir el archivo Excel  
hojas <- excel_sheets(archivo); hojas
for (h in hojas) {
  cat("\n--- Hoja:", h, "---\n")
  datos_hoja <- read_excel(archivo, sheet = h, n_max = 10)  # solo primeras 5 filas
  print(datos_hoja)
}
datos <- read_excel(archivo, sheet = 9)

##############################################################################################################################################

# DBCA:
# ANDEVA

factores <- c("Vinaza", "N_kg") 
for (f in factores) {
  datos[[f]] <- as.factor(datos[[f]])
}

respuestas <- c("TCH", "Brix", "Pol", "Pureza", "Jugo", "Fibra", "Humedad","Rendimiento")

for (var in respuestas) {
  formula_anidada <- paste(factores, collapse = "*")
  formula <- as.formula(paste0("`", var, "` ~ Replica + ", formula_anidada))  # bloque agregado
  
  modelo <- aov(formula, data = datos)
  
  cat("\n====================================\n")
  cat("ANDEVA para la variable:", var, "\n")
  cat("====================================\n")
  
  print(summary(modelo))
}


#Verificación de supuestos para todas las variables de respuesta

for (var in respuestas) {
  formula <- as.formula(paste0("`", var, "` ~ Replica + ", paste(factores, collapse = "*")))
  modelo <- aov(formula, data = datos)
  
  # QQ-plot y Shapiro-Wilk
  qqPlot(modelo$residuals, main = paste("QQ-plot:", var), col = "red", lwd = 2, pch = 16)
  if(length(unique(modelo$residuals)) > 1){
    SW <- shapiro.test(modelo$residuals)
    cat("\nShapiro-Wilk para", var, ":\n")
    print(SW)
  }
  
  # Residuos vs Ajustados
  plot(modelo$fitted.values, modelo$residuals,
       main=paste("Residuos vs Ajustados:", var),
       xlab="Valores Ajustados", ylab="Residuos", pch=16, col="blue")
  abline(h=0, col="red", lwd=2)
  
  # Bartlett y Levene usando interacción de factores de tratamiento
  formula_interaccion <- as.formula(paste0("`", var, "` ~ interaction(", paste(factores, collapse = ":"), ")"))
  
  if(length(unique(datos[[var]])) > 1){
    cat("\nPrueba de Bartlett para", var, ":\n")
    tryCatch({
      print(bartlett.test(formula_interaccion, data = datos))
    }, error = function(e){cat("Error Bartlett:", e$message, "\n")})
    
    cat("\nPrueba de Levene para", var, ":\n")
    tryCatch({
      print(leveneTest(formula_interaccion, data = datos, center="median"))
    }, error = function(e){cat("Error Levene:", e$message, "\n")})
  }
}

#Prueba múltiple de medias (Tukey y Scott-Knott)------

# Convertir factores a factor
for (f in factores) {
  datos[[f]] <- as.factor(datos[[f]])
}


for (var in respuestas) {
  cat("\n====================================\n")
  cat("Pruebas de medias para la variable:", var, "\n")
  cat("====================================\n")
  
  # Interacción completa
  cat("\n--- Interacción completa ---\n")
  datos$interaccion_completa <- interaction(datos[, factores], sep = "_")
  modelo_interaccion <- aov(as.formula(paste0("`", var, "` ~ interaccion_completa")), data = datos)
  
  if(length(unique(datos[[var]])) > 1){
    cat("\nTukey HSD - Interacción completa:\n")
    HSD.test(modelo_interaccion, "interaccion_completa", console = TRUE)
    
    cat("\nScott-Knott - Interacción completa:\n")
    try({
      sk <- SK(modelo_interaccion, which="interaccion_completa", dispersion="se", sig.level=0.05)
      print(summary(sk))
    })
  } else {
    cat("Pruebas de medias no se pueden calcular: variable constante.\n")
  }
  
  # Factores individuales
  for (f in factores) {
    cat("\n--- Factor:", f, "---\n")
    modelo_factor <- aov(as.formula(paste0("`", var, "` ~ ", f)), data = datos)
    
    cat("\nTukey HSD - Factor", f, ":\n")
    HSD.test(modelo_factor, f, console = TRUE)
    
    cat("\nScott-Knott - Factor", f, ":\n")
    try({
      sk_f <- SK(modelo_factor, which=f, dispersion="se", sig.level=0.05)
      print(summary(sk_f))
    })
  }
  
  datos$interaccion_completa <- NULL
}

# Análisis gráfico

for (var in respuestas) {
  cat("\n====================================\n")
  cat("Gráficos para:", var, "\n")
  cat("====================================\n")
  
  # Factores individuales
  for (f in factores) {
    resumen_factor <- datos %>%
      group_by(.data[[f]]) %>%
      summarise(media = mean(.data[[var]], na.rm = TRUE),
                se = sd(.data[[var]], na.rm = TRUE)/sqrt(n()),
                .groups = "drop")
    
    # Barras con vigotes
    p_barra <- ggplot(resumen_factor, aes(x = .data[[f]], y = media)) +
      geom_bar(stat="identity", fill="gray70", color="black") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Barras -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p_barra)
    
    # Puntos con vigotes
    p_punto <- ggplot(resumen_factor, aes(x = .data[[f]], y = media)) +
      geom_point(size=3, color="steelblue") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Puntos -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p_punto)
    
    # Boxplot
    p_box <- ggplot(datos, aes(x=.data[[f]], y=.data[[var]])) +
      geom_boxplot(fill="lightblue") +
      labs(title=paste("Boxplot -", f, "-", var), x=f, y=var) +
      theme_minimal()
    print(p_box)
  }
  
  # Interacción
  if(length(factores) > 1) {
    factor1 <- factores[1]
    factor2 <- factores[2]
    
    resumen_interaccion <- datos %>%
      group_by(.data[[factor1]], .data[[factor2]]) %>%
      summarise(media = mean(.data[[var]], na.rm=TRUE),
                se = sd(.data[[var]], na.rm=TRUE)/sqrt(n()),
                .groups="drop") %>%
      ungroup() %>%
      mutate(Interaccion = interaction(.data[[factor1]], .data[[factor2]]))
    
    # Línea de interacción limpia
    p_lineas <- ggplot(resumen_interaccion, aes(x=.data[[factor1]], y=media, group=.data[[factor2]], color=.data[[factor2]])) +
      geom_line(size=1.2) +
      geom_point(size=3) +
      labs(title=paste("Interacción líneas -", factor1, "x", factor2, "-", var),
           x=factor1, y=var, color=factor2) +
      theme_minimal()
    print(p_lineas)
    
    # Barras de interacción con vigotes
    p_barras <- ggplot(resumen_interaccion, aes(x=Interaccion, y=media)) +
      geom_bar(stat="identity", fill="lightcoral", color="black") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Barras interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_barras)
    
    # Puntos de interacción con vigotes
    p_puntos <- ggplot(resumen_interaccion, aes(x=Interaccion, y=media)) +
      geom_point(size=3, color="firebrick") +
      geom_errorbar(aes(ymin=media-se, ymax=media+se), width=0.2) +
      labs(title=paste("Puntos interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_puntos)
    
    # Boxplot de interacción
    p_box_inter <- ggplot(datos, aes(x=interaction(.data[[factor1]], .data[[factor2]]), y=.data[[var]])) +
      geom_boxplot(fill="lightgreen") +
      labs(title=paste("Boxplot interacción -", var), x="Interacción", y=var) +
      theme_minimal()
    print(p_box_inter)
  }
}
