# MLG: distribución Binomial negativa con función de enlace logarítmica--------------------------------------
colnames(df)
m1 <- glm.nb(insectos_m2 ~ insecticida + bloque, data = df)

summary(m1)
Anova(m1)

# Validación de supuestos del modelo

simulationOutput <- simulateResiduals(fittedModel = m1, n = 1000)
plot(simulationOutput)                                               #pruebas de normalidad y homocedasticidad
plotResiduals(simulationOutput, form = df$insecticida) # Box-plot
plotResiduals(simulationOutput, form = df$bloque) # Box-plot/bloque o repetición 
testUniformity(simulationOutput)
testDispersion(simulationOutput)

# Gráfico de influencia: Multicolinealidad y efectos que influyen 
influencePlot(m1, id.n = 3)

# Pruebas post-hoc
emm_m1 <- emmeans(m1, ~ insecticida)
pairs(emm_m1, adjust = "tukey")
cld_m1 <- cld(emm_m1, Letters = letters, adjust = "sidak", type = "response")
cld_m1

# Gráfico de barras con líneas de error
emm_df <- as.data.frame(cld_m1)

ggplot(emm_df, aes(x = insecticida, y = response)) +
  geom_col(fill = "steelblue", width = 0.7) +
  geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL), width = 0.15) +
  geom_text(aes(label = .group), vjust = -0.5, size = 5) +
  labs(
    x = "Tratamiento (Insecticida)",
    y = "Media ajustada (Insectos/m2)",
    title = "Medias ajustadas y agrupaciones (GLM binomial negativo)"
  ) +
  theme_minimal(base_size = 13)


# Modelo Poisson----------------------------------------

m_pois <- glm(insectos_m2 ~ bloque + insecticida, 
              family = poisson(link = "log"), 
              data = df)

library(DHARMa)
simulationOutput <- simulateResiduals(fittedModel = m_pois, n = 1000)
testDispersion(simulationOutput)  # DHARMa detectará la sobredispersión
plot(simulationOutput)



# MLG con distribución quassi poisson--------------------------------------------------
names(df)

m_qp<- glm(insectos_m2 ~ bloque + insecticida, family = quasipoisson(link = "log"), data = df)
summary(m_qp)
Anova(m_qp, test.statistic = "F")



simulationOutput <- simulateResiduals(fittedModel = m_qp, n = 1000)
plot(simulationOutput)          
testUniformity(simulationOutput) 
testDispersion(simulationOutput) 
testOutliers(simulationOutput)   


